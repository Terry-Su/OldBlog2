{"blogs":[{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/CN-Blogs/技术/Redux/reveal-redux-react-redux-mask/index.md","relativeClientUrl":"detail/reveal-redux-react-redux-mask.html","relativeClientPropsUrl":"所有分类/技术/Redux/reveal-redux-react-redux-mask/props.json","name":"揭开redux，react-redux的神秘面纱","markedHtml":"<p>16年开始使用react-redux,迄今也已两年多。这时候再来阅读和读懂redux/react-redux源码，虽已没有当初的新鲜感，但依然觉得略有收获。把要点简单写下来，一方面供感兴趣的读者参考，另一方面也是自己做下总结。</p>\n<h2 id=\"redux\">redux</h2>\n<p>react-redux最核心的内容就是redux。内带redux，react-redux只提供了几个API来关联redux与react的组件以及react state的更新。</p>\n<p>首先，看下如何使用redux。 redux老司机可以直接滑动滚轮至下一章。<br>简单来说，redux有三个概念，action, reducer 和 dispatch。 action和dispatch比较好理解：动作指令和提交动作指令方法。而reducer，个人在字面上没有理解，但抽象层面上可以理解为用来生成state的函数。用一个简单案例体现这三个概念：</p>\n<pre><code class=\"language-js\">// action\nconst INCREMENT = { type: &#39;INCREMENT&#39; }\n\n// reducer\nfunction count( state = 0, action ) {\n    switch( action.type ) {\n        case &#39;INCREMENT&#39;:\n            return state + 1\n        default: \n          return state\n    }\n}\n\n// dispatch\n// 此处开始使用redux\nconst store = redux.createStore( count )\nconsole.log( store.getState() )  // 0\nstore.dispatch( INCREMENT )\nconsole.log( store.getState() ) // 1</code></pre>\n<p>接下来说说redux中的两大模块：</p>\n<ul>\n<li><code>store</code>对象</li>\n<li>中间件</li>\n</ul>\n<h2 id=\"store-\">store对象</h2>\n<p>API<code>createStore</code>会创建了一个<code>store</code>对象,创建的过程中它主要做了下面两件事：</p>\n<ol>\n<li>初始化state</li>\n<li>暴露相关接口：<code>getState()</code>, <code>dispatch( action )</code>, <code>subscribe( listener )</code>等。其中<code>getState()</code>用来获取store中的实时state, <code>dispatch(action)</code>根据传入的action更新state, <code>subscribe( listener)</code>可以监听state的变化。</li>\n</ol>\n<h2 id=\"-\">中间件</h2>\n<p>中间件可以用来debug或提交异步动作指令. 在初始化store的时候，我们通过<code>createStore( reducer, state, applyMiddleware( middleware1, middleware2 ) )</code>添加多个中间件。<br>为了实现多个中间件，redux专门引入了函数式编程的<code>compose()</code>方法，简单来说，<code>compose</code>将多层函数调用的写法变得优雅：</p>\n<pre><code class=\"language-js\">// 未使用compose方法\na( b( c( &#39;d&#39; ) ) )\n\n// 用compose方法\ncompose( a, b, c )(&#39;d&#39;)</code></pre>\n<p>而中间件的写法比较奇特，是多级函数，在阅读源码的时候有点绕。显然中间件的写法还可以优化，尽管现在的写法方便在源码中使用，但对redux用户来说稍显复杂，可以用单层函数。</p>\n<pre><code class=\"language-js\">function logMiddleware({ getState  }) {\n    return nextDispatch =&gt; action =&gt; {\n        console.log( &#39;before dispatch&#39;, getState() )\n        const res = nextDispatch( action )\n        console.log( &#39;after dispatch&#39;, getState() )\n        return res\n    }\n}</code></pre>\n<h2 id=\"react-redux\">react-redux</h2>\n<p>了解了redux运作原理，就可以知道react-redux的大部分使用场景是如何运作。react-redux提供了几个API将redux与react相互关联。</p>\n<p>基于上一个案例展示react-redux的用法：</p>\n<pre><code class=\"language-jsx\">// action\nconst increment = () =&gt; ({ type: &#39;INCREMENT&#39; })\n\n// reducer\nfunction count( state = 0, action ) {\n    switch( action.type ) {\n        case &#39;INCREMENT&#39;:\n            return state + 1\n        default: \n          return state\n    }\n}\n\n// redux\nconst store = Redux.createStore( count )\n\n// react-redux\nconst { Provider, connect } = ReactRedux\nconst mapStateToProps = state =&gt; ( { count: state } )\nconst mapDispatchToProps = dispatch =&gt; ( { increment : () =&gt; dispatch( increment() ) } )\nconst App = connect( mapStateToProps, mapDispatchToProps )( class extends React.Component {\n  onClick = () =&gt; {\n   this.props.increment()\n  }  \n  render() {\n        return &lt;div&gt;\n          &lt;p&gt;Count: { this.props.count }&lt;/p&gt;\n          &lt;button onClick={ this.onClick }&gt;+&lt;/button&gt;\n        &lt;/div&gt;\n    }\n} )\n\nReactDOM.render( &lt;Provider store={ store }&gt;\n    &lt;App /&gt;\n&lt;/Provider&gt;, document.getElementById( &#39;app&#39; ) )</code></pre>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/js/react-redux/demo/index.html?mode=result\"></iframe>\n\n\n\n<p>react-redux提供最常用的两个API是：</p>\n<ul>\n<li><code>Provider</code></li>\n<li><code>connect</code></li>\n</ul>\n<h2 id=\"provider\"><code>Provider</code></h2>\n<p>Provider本质上是一个react组件，通过react的<a href=\"https://reactjs.org/docs/legacy-context.html#how-to-use-context\">context api</a>(使一个组件可以跨多级组件传递props)挂载redux store中的state，并且当组件初始化后开始监听state。\n当监听到state改变，Provider会重新<code>setState</code>在context上的<code>storeState</code>，简要实现代码如下：</p>\n<pre><code class=\"language-jsx\">class Provider extends Component {\n    constructor(props) {\n      super(props)\n\n      const { store } = props\n\n      this.state = {\n        storeState: Redux.store.getState(),\n      }\n    }\n\n    componentDidMount() {\n      this.subscribe()\n    }\n\n    subscribe() {\n        const { store } = this.props\n        store.subscribe(() =&gt; {\n          const newStoreState = store.getState()\n          this.setState(providerState =&gt; {\n            return { storeState: newStoreState }\n          })\n        })\n    }\n    render() {\n        const Context = React.createContext(null)\n        &lt;Context.Provider value={this.state}&gt;\n            {this.props.children}\n        &lt;/Context.Provider&gt;\n    }\n}</code></pre>\n<h2 id=\"connect-\"><code>connect()</code></h2>\n<p><code>connect</code>方法通过<code>connectHOC</code>（HOC: react高阶组件）将部分或所有state以及提交动作指令方法赋值给react组件的props。</p>\n<h2 id=\"-\">小结</h2>\n<p>写react不用redux就像写代码不用git, 我们需要用redux来更好地管理react应用中的state。了解redux/react-redux的运作原理会消除我们在使用redux开发时的未知和疑惑，并且在脑中有一个完整的代码执行回路，让开发流程变得透明，直观。</p>\n","createTime":"2018/12/18 9:27","categorySequence":["所有分类","技术","Redux"],"tags":[],"introduction":"16年开始使用react-redux,迄今也已两年多。这时候再来阅读和读懂redux/react-redux源码，虽已没有当初的新鲜感，但依然觉得略有收获。把要点简单写下来，一方面供感兴趣的读者参考，另一方面也是自己做下总结。...","uniqueHtmlName":"reveal-redux-react-redux-mask","blogProps":{"name":"揭开redux，react-redux的神秘面纱","createTime":"2018/12/18 9:27","comment":"4"}}]}
