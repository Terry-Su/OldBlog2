{"blogs":[{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/CSS/Common Flex Use Cases/Common Flex Use Cases.md","relativeClientUrl":"blog/detail/common-flex-use-cases.html","relativeClientPropsUrl":"All/Technology/CSS/Common Flex Use Cases/props.json","name":"Common Flex Use Cases","markedHtml":"<p>Flex is very useful and commonly used in daily development, here summarizes several common use cases:</p>\n<ul>\n<li>navigation</li>\n<li>center an element horizontally or vertically</li>\n<li>together with input</li>\n<li>responsive website layout</li>\n<li>display icons in multi-lines </li>\n</ul>\n<h2 id=\"navigation\">Navigation</h2>\n<br />\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/flex/comon-layouts/navigation/index.html?mode=css\"></iframe>\n\n\n<h2 id=\"center-an-element-horizontally-or-vertically\">Center an Element Horizontally or Vertically</h2>\n<br />\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/flex/comon-layouts/center/index.html?mode=css\"></iframe>\n\n<p>Btw, using <code>place-items: center</code> in grid layout to center an element is more elegant.</p>\n<pre><code class=\"language-css\">.container {\n  display: grid;\n  place-items: center;\n  ...\n}\n...</code></pre>\n<h2 id=\"together-with-input\">Together with Input</h2>\n<p>Input&#39;s width is adjusted automatically.\n<br />  </p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/flex/comon-layouts/together-with-input/index.html?mode=css\"></iframe>\n\n\n\n<h2 id=\"responsive-website-layout\">Responsive Website Layout</h2>\n<p>One side&#39;s with is fixed, the other is flexible.\n<br />  </p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/flex/comon-layouts/responsive/index.html?mode=css\"></iframe>\n\n\n<h2 id=\"display-icons-in-multi-lines\">Display Icons in Multi-lines</h2>\n<p><br />  </p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/flex/comon-layouts/display-items/index.html?mode=css\"></iframe>\n","createTime":"2019/2/12 16:12","categorySequence":["All","Technology","CSS"],"tags":["css"],"introduction":"Flex is very useful and commonly used in daily development, here summarizes several common use cases:...","uniqueHtmlName":"common-flex-use-cases","blogProps":{"createTime":"2019/2/12 16:12","tags":["css"],"comment":"16"}},{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/Algorithm/Topic/Vivid Metaphor of Data Structures/Vivid Metaphor of Data Structures.md","relativeClientUrl":"blog/detail/vivid-metaphor-of-data-structures.html","relativeClientPropsUrl":"All/Technology/Algorithm/Topic/Vivid Metaphor of Data Structures/props.json","name":"Vivid Metaphor of Data Structures","markedHtml":"<p>Data structures are abstract, sometimes hard to be understood. However, vivid metaphor helps us to master them better.  </p>\n<p>Data strcutres included in this article:</p>\n<ul>\n<li>stack</li>\n<li>queue</li>\n<li>linked list</li>\n</ul>\n<h2 id=\"stack\">Stack</h2>\n<p>First, let&#39;s see stack&#39;s core features:</p>\n<ul>\n<li><code>push( item )</code>: push an item at end</li>\n<li><code>pop()</code>: remove an item from end</li>\n<li><code>peek()</code>: get the end element</li>\n</ul>\n<p>I found a <a href=\"https://jshilpa.com/stacks-in-a-nutshell-learning-through-examples/\">very visual example</a> before, that&#39;s an open chips box.   </p>\n<p>And to corresponse with our development habbit(count index from left to right), I push it down.   </p>\n<p><img src=\"https://terry-su.github.io/BlogCDN/images/pringles.jpg\" alt=\"\">      </p>\n<ul>\n<li>we push a chip into box: <code>push( chip )</code></li>\n<li>we take a chip from box: <code>pop()</code></li>\n<li>current top chip in box: <code>peek()</code></li>\n</ul>\n<h2 id=\"queue\">Queue</h2>\n<p>Queue is similiar to stack, but easiler to learn.   </p>\n<p>Queue&#39;s key features are:</p>\n<ul>\n<li><code>enqueue( item )</code>: push an item at end </li>\n<li><code>dequeue()</code>: remove an item from front</li>\n<li><code>peekFront()</code>: get the front item</li>\n<li><code>peekEnd()</code>: get the end item</li>\n</ul>\n<p>Suppose there&#39;re some people queuing to use ATM.  </p>\n<p><img src=\"https://terry-su.github.io/BlogCDN/images/queue-for-atm.png\" alt=\"\">  </p>\n<ul>\n<li>at end comes a new guy: <code>enqueue( person )</code></li>\n<li>front guy has done and leave: <code>dequeue()</code></li>\n<li>current front guy: <code>peekFront()</code></li>\n<li>current last guy: <code>peekEnd()</code></li>\n</ul>\n<h2 id=\"linked-list\">Linked List</h2>\n<p>Linked list consists of nodes, and each node can have a link to another link, like a chain.</p>\n<p><img src=\"https://terry-su.github.io/BlogCDN/images/chain.jpg\" alt=\"\">  </p>\n<p>Mock its main concept via codes:</p>\n<pre><code class=\"language-js\">const nodeC = { link: null }\nconst nodeB = { link: nodeC }\nconst nodeA = { link: nodeB }\n\nconst linkedList = { head: nodeA }</code></pre>\n","createTime":"2019/01/17 12:39","categorySequence":["All","Technology","Algorithm","Topic"],"tags":[],"introduction":"Data structures are abstract, sometimes hard to be understood. However, vivid metaphor helps us to master...","uniqueHtmlName":"vivid-metaphor-of-data-structures","blogProps":{"createTime":"2019/01/17 12:39","comment":"15"}},{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/Algorithm/Sorting Algorithm/Demonstrate Sorting Algorithms with Animated Demos/Demonstrate Sorting Algorithms with Animated Demos.md","relativeClientUrl":"blog/detail/demonstrate-sorting-algorithms-with-animated-demos.html","relativeClientPropsUrl":"All/Technology/Algorithm/Sorting Algorithm/Demonstrate Sorting Algorithms with Animated Demos/props.json","name":"Demonstrate Sorting Algorithms with Animated Demos","markedHtml":"<p><img src=\"https://terry-su.github.io/BlogCDN/images/simpson-evolution.jpg\" alt=\"\">    </p>\n<p>After learning common sorting algorithms, feel like demonstrating them using not only brief description but also animated demos.</p>\n<p>Here contains 6 sorting algorithms, half are simple, half are advanced.</p>\n<ul>\n<li>Bubble sort</li>\n<li>Selection sort</li>\n<li>Insertion sort</li>\n<li>~</li>\n<li>Merge sort</li>\n<li>Shell sort</li>\n<li>Quick sort</li>\n</ul>\n<h2 id=\"bubble-sort\">Bubble sort</h2>\n<p>This maybe the simplest sort, notoriously slow though.<br>Suppose we were arranging a queue of baseball players by their height. \nStart from leftmost.</p>\n<ol>\n<li>compare two players </li>\n<li>if the one on the left is taller, swap them. Otherwise, no action.</li>\n<li>move one position right</li>\n</ol>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/algorithm/bubble-sort/index.html?mode=result\" ></iframe>\n\n\n\n<h2 id=\"selection-sort\">Selection sort</h2>\n<p>Start from leftmost too.</p>\n<ol>\n<li>look for minimum player from current position to right</li>\n<li>swap minimum player with the player at current position</li>\n<li>move one position right</li>\n</ol>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/algorithm/selection-sort/index.html?mode=result\" ></iframe>\n\n\n\n<h2 id=\"insertion-sort\">Insertion sort</h2>\n<p>In most cases, this is the best of elementary sorts. It&#39;s about twice as fast as the bubble sort.<br>The steps is somewhat complicated than sorts above.Start from leftmost.</p>\n<ol>\n<li>partially sort left players</li>\n<li>choose the first unsorted player as marked player</li>\n<li>shift the players shorter than marked player to right</li>\n<li>insert marked player into the previous  position of first shifted player.</li>\n</ol>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/algorithm/insertion-sort/index.html?mode=result\" ></iframe>\n\n\n\n\n<h2 id=\"merge-sort\">Merge sort</h2>\n<p>The heart of the merge sort algorithm are the merging of two already-sorted arrays and recursion.<br><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e6/Merge_sort_algorithm_diagram.svg/800px-Merge_sort_algorithm_diagram.svg.png\" alt=\"\"></p>\n<p>As shown in picture, main steps are:</p>\n<ol>\n<li>Recur to split numbers into 2 parts</li>\n<li>merge 2 parts</li>\n</ol>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/algorithm/merge-sort/index.html?mode=result\" ></iframe>\n\n\n\n<h2 id=\"shell-sort\">Shell sort</h2>\n<p>The name &quot;Shell sort&quot; is named for Donald Shell, who discovered it. It&#39;s based on <strong>insertion sort</strong>, but adds a new feature that dramatically improves the insertion sort&#39;s performance.  </p>\n<p>Main steps</p>\n<ol>\n<li>divide array into groups by interval(3 for example) and sort them continously until all items are divided and sorted.</li>\n<li>diminish the interval and continue to divide and sort until the interval becomes 1.</li>\n</ol>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/algorithm/shell-sort/index.html?mode=result\" ></iframe>\n\n\n\n\n<h2 id=\"quick-sort\">Quick sort</h2>\n<p>In the majority of situations, this is the fastest sort.</p>\n<ol>\n<li>choose a pivot(rightmost item)</li>\n<li>partition the array into left sub array(smaller keys) and right sub array(larger keys)</li>\n<li>recur step2 to left sub array and right sub array</li>\n</ol>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/algorithm/quick-sort/index.html?mode=result\" ></iframe>\n\n","createTime":"2019/01/15 22:54","categorySequence":["All","Technology","Algorithm","Sorting Algorithm"],"tags":[],"introduction":"[https://terry-su.github.io/BlogCDN/images/simpson-evolution.jpg] After learning common sorting algorithms,...","uniqueHtmlName":"demonstrate-sorting-algorithms-with-animated-demos","blogProps":{"createTime":"2019/01/15 22:54","comment":"13"}},{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/Javascript/Topic/A Deep Dive into Event Capture and Bubbling/A Deep Dive into Event Capture and Bubbling.md","relativeClientUrl":"blog/detail/a-deep-dive-into-event-capture-and-bubbling.html","relativeClientPropsUrl":"All/Technology/Javascript/Topic/A Deep Dive into Event Capture and Bubbling/props.json","name":"A Deep Dive into Event Capture and Bubbling","markedHtml":"<p>Suppose there&#39;s a div with a child div in it, and both of 2 divs have registered click events. If we click on the child div, which click event of 2 divs will fire first?<br><img src=\"https://terry-su.github.io/BlogCDN/images/blog-event-capture-bubbling/1.png\" alt=\"\"></p>\n<p>That question will take us to the topic today: Event Bubbling and Capture, in which the <strong>three phases of event propagation</strong> is the <strong>key</strong>.</p>\n<p>To solve the question above, we&#39;ve gotta know what event bubbling and capture are. And to know event bubbling and capture, we&#39;ve to know how the dom events of dom elements fire. </p>\n<p>As found in <a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#event-flow\">W3C-Event Flow</a>, if a dom event was triggered, its event objects will pass through 3 phases to dispatch themselves to event targets(dom elements):  </p>\n<p><img src=\"https://terry-su.github.io/BlogCDN/images/blog-event-capture-bubbling/2.png\" alt=\"\">    </p>\n<ol>\n<li><p>Capture phase<br>The event object passes through to the event target&#39;s ancestors from <code>Window</code> to the event target&#39;s parent.<br>If there&#39;re other available event targets whose capture attribute is set to <code>true</code>, then the event object will be dispatched to them.</p>\n</li>\n<li><p>Target phase<br>The event object arrives the event target.<br>If the event target&#39;s event type indicates the event doesn&#39;t bubble, then the event object will stop after this phase.</p>\n</li>\n<li><p>Bubbling Phase<br>(Reverse to capture phase)The event object passes through to the event target&#39;s ancestors from the event target&#39;s parent to <code>Window</code>.<br>If there&#39;re other available event targets whose bubbling attribute is set to <code>true</code>, then the event object will be dispatched to them.</p>\n</li>\n</ol>\n<p>Let&#39;s look back at the previous question, the answer can be clear.   </p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/js/event-capture-bubbling/example/index.html?mode=result\" frameborder=\"0\"></iframe>\n\n\n<p>In this example, each box and its inner box both have registered click events. Once they were clicked, their borders will highlight one by one by the event propagation order. With the three phases of event propagation above, we could know how the 4 situations above happened.</p>\n<p>To make a summary: browser captures the event targets whose capture attribute is <code>true</code> by dom tree order first, then bubbles the event targets whose bubbling attribute is <code>true</code> by reverse dom tree order.</p>\n","createTime":"2018/10/12 16:22","categorySequence":["All","Technology","Javascript","Topic"],"tags":["javascript"],"introduction":"Suppose there's a div with a child div in it, and both of 2 divs have registered click events. If we...","uniqueHtmlName":"a-deep-dive-into-event-capture-and-bubbling","blogProps":{"createTime":"2018/10/12 16:22","tags":["javascript"],"comment":"12"}},{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/Javascript/Topic/Master JavaScript Implicit Type Conversion/Master JavaScript Implicit Type Conversion.md","relativeClientUrl":"blog/detail/master-javascript-implicit-type-conversion.html","relativeClientPropsUrl":"All/Technology/Javascript/Topic/Master JavaScript Implicit Type Conversion/props.json","name":"Master JavaScript Implicit Type Conversion","markedHtml":"<p><img src=\"https://terry-su.github.io/BlogCDN/images/photo/qing-cheng-shan.jpg\" alt=\"The Peak of Mountain QingCheng\">\n<em>The Peak of Mountain QingCheng</em></p>\n<p>Before starting this written-in-English article, I&#39;d like to thank   <a href=\"https://www.reddit.com/user/l3l_aze\">@l3l_aze</a> for pointing out my previous technology article&#39;s problems and giving me precious advice on how to write better in English. And after some time for preparation, I start writing articles in English again and will continue to write more.</p>\n<p>Implicit type conversion is one of JavaScript&#39;s most hot and important features. To master it completely, I&#39;ve searched lots of relevant articles, consulted the book &quot;JavaScript: The Definitive Guide, 6th&quot; and summarized those concepts, ideas, examples into this article.</p>\n<blockquote>\n<p>To learn a new knowledge point, we usually search and read a lot of relevant materials(blogs, StackOverflow, etc) online. However, to master it thoroughly, we&#39;d better look for its origin from the definitive material like MDN or a definitive book to ensure its correctness.</p>\n</blockquote>\n<h2 id=\"what-s-the-implicit-type-conversion-\">What&#39;s the implicit type conversion?</h2>\n<p>JavaScript is very flexible, it will convert the type of a value as needed automatically.\nFor example:</p>\n<pre><code class=\"language-js\">&#39;&#39; + 1 // &#39;1&#39;</code></pre>\n<h2 id=\"when-will-implicit-type-conversion-happen-\">When will implicit type conversion happen?</h2>\n<p>Here lists commonly used situations:</p>\n<p><strong>Expressions(with operators)</strong><br><em>Arithmetic</em>  </p>\n<ul>\n<li><code>+</code></li>\n</ul>\n<pre><code class=\"language-js\">/* unary +, converse x to number */\n+ x\n\n+ 1 // 1\n+ &#39;1&#39; // 1\n+ true // 1\n+ new Date() // (a numeric value)\n\n\n/* two operands */\na + b\n\n// 1. if either is an object, converse it to a primitive first\n{} + {} // &#39;[object object][object object]&#39;\n[] + [] // &#39;&#39;\n[] + new Date() // (A date string)\n\n// 2. if one is a string, converse the other to a string\n1 + &#39;&#39; // &#39;1&#39;\n&#39;&#39; + 1 // &#39;1&#39;\n&#39;&#39; + true // &#39;true&#39;\n\n// 3. otherwise, converse both to numbers\n1 + true // 2\ntrue + true // 2</code></pre>\n<ul>\n<li><code>-</code>, <code>*</code>, <code>/</code>, <code>++</code>, <code>--</code></li>\n</ul>\n<pre><code class=\"language-js\">/* Converse value or values to number */\n- &#39;1&#39; // -1\n[] - 1 // -1\n[] - {} // NaN</code></pre>\n<p><em>Relational</em></p>\n<ul>\n<li><code>==</code>, <code>!=</code></li>\n</ul>\n<pre><code class=\"language-js\">/* two operands */\na == b\n\n// 1. if one is `null` and the other is `undefined`, they are equal\nnull == undefined // true\n\n// 2. if one is a number and the other is a string, convert the string\n// to a number, compare again\n1 == &#39;1&#39; // true\n\n// 3. if either is boolean, convert it to a number, compare again\ntrue == 1 // true\nfalse == 0 // true\n\n// 4. if one is an object, and the other is a number or a string, \n// convert the object to a primitive, compare again\n[ 1 ] == 1 // true\n[ &#39;1&#39; ] == &#39;1&#39; // true</code></pre>\n<ul>\n<li><code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code></li>\n</ul>\n<pre><code class=\"language-js\">/* two operands */\na &gt; b\n\n// 1. if either is an object, convert it to a primitive, compare again\n[ 2 ] &gt; 1 // true\n\n// 2. if both are strings, compare them using alphabetical order\n&#39;b&#39; &gt; &#39;a&#39; // true\n\n// 3. if either is a number, convert one or two not number to number\n&#39;2&#39; &gt; 1 // true</code></pre>\n<ul>\n<li><code>in</code></li>\n</ul>\n<pre><code class=\"language-js\">/* if left operand isn&#39;t a string, convert it to a string  */\na in b\n\n&#39;1&#39; in { 1: &#39;&#39; } // true\n1 in { 1: &#39;a&#39; } // true\n1 in [ &#39;a&#39;, &#39;b&#39; ] // true</code></pre>\n<p><em>Logic</em>  </p>\n<ul>\n<li><code>&amp;&amp;</code>, <code>||</code>, <code>!</code></li>\n</ul>\n<pre><code class=\"language-js\">/* if either isn&#39;t booelan, convert it to a boolean value */\nBoolean( null || undefined || 0 || -0 || NaN || &#39;&#39; ) // false\nBoolean( 1 &amp;&amp; &#39;a&#39; &amp;&amp; {} &amp;&amp; [] &amp;&amp; [0] &amp;&amp; function(){} ) // true</code></pre>\n<p>Note that <strong>following</strong> <code>?:</code>, <code>if</code>, <code>else if</code>, <code>while</code>, <code>do/while</code> and <code>for</code> use the <strong>same implicit type conversion way</strong> as <code>&amp;&amp;</code>, <code>||</code> and <code>!</code>(Logic expression).</p>\n<p><em>Conditional</em></p>\n<ul>\n<li><code>?:</code></li>\n</ul>\n<p><strong>Statements</strong><br><em>Conditional</em>  </p>\n<ul>\n<li><code>if</code>, <code>else if</code></li>\n</ul>\n<p><em>Loop</em></p>\n<ul>\n<li><code>while</code>, <code>do/while</code>, <code>for</code></li>\n</ul>\n<h2 id=\"how-about-explicit-type-conversion\">How about explicit type conversion</h2>\n<p>Explicit type conversion makes the type conversion codes clear.<br>Although there&#39;re many ways to perform an explicit type conversion, such as <code>toString()</code> and <code>parseInt()</code>, it&#39;s recommended to use <code>Boolean()</code>, <code>Number()</code>, <code>String()</code> or <code>Object()</code> functions.</p>\n<pre><code class=\"language-js\">Boolean( 1 ) // true\nBoolean( 0 ) // false\n\nNumber( &#39;1&#39; ) // 1\n\nString( 1 ) // &#39;1&#39;\n\nObject( 1 ) // new Number(1)</code></pre>\n<h2 id=\"common-javascript-type-conversion\">Common JavaScript Type Conversion</h2>\n<p>The following reference table, from the book &quot;JavaScript: The Definitive Guide, 6th&quot;, is especially convenient to look up common type conversion in JavaScript</p>\n<p><img src=\"https://terry-su.github.io/BlogCDN/images/javascript-type-conversion.png\" alt=\"Little Bar\">\n<em>&quot;JavaScript-The Definitive Guide 6th&quot; 3.8.0</em></p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Implicit type conversion can be very useful sometimes, simplifying our codes, for example. But we&#39;d better also pay attention to the potential risk that conversed value could be unexpected if someone wasn&#39;t familiar with the rules of implicit type conversion enough. To avoid this, use explicit type conversion instead.</p>\n","createTime":"2018/10/09 14:53","categorySequence":["All","Technology","Javascript","Topic"],"tags":["javascript"],"introduction":"The Peak of Mountain QingCheng [https://terry-su.github.io/BlogCDN/images/photo/qing-cheng-shan.jpg]...","uniqueHtmlName":"master-javascript-implicit-type-conversion","blogProps":{"createTime":"2018/10/09 14:53","tags":["javascript"],"comment":"11"}},{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/Project/HTML,CSS,JS Plus Github Equals Your Own CodePen/HTML,CSS,JS Plus Github Equals Your Own CodePen.md","relativeClientUrl":"blog/detail/html,css,js-plus-github-equals-your-own-codepen.html","relativeClientPropsUrl":"All/Technology/Project/HTML,CSS,JS Plus Github Equals Your Own CodePen/props.json","name":"HTML/CSS/JS + Github = Your Own CodePen","markedHtml":"<p><img src=\"https://terry-su.github.io/BlogCDN/images/photo/little-bar.jpg\" alt=\"Little Bar\">\n<em>( Little Bar at ChengDu, China )</em></p>\n<p><a href=\"https://codepen.io\">CodePen</a> and <a href=\"https://jsfiddle.net/\">JSFiddle</a> are both convenient online codes editors for front-end developers. And you can demonstrate your code examples vividly in your blog or website by inserting an online editor example, which displays codes and the final result.  </p>\n<p>However, how an editor&#39;s style can stay the same with the style of your blog or website is a problem, and you have to rely on them deeply. Because of these limits, I&#39;m wondering if we can write our own code viewer using totally front-end technologies without any dynamic server, and the answer is amazing &quot;YES&quot;.</p>\n<h2 id=\"showcase\">Showcase</h2>\n<iframe src=\"https://terry-su.github.io/CDN/CodeViewer/index.html?defaultDataUrl=https://terry-su.github.io/CDN/CodeViewer/examples/hello.js\" frameborder=\"0\"></iframe>\n\n\n\n<h2 id=\"how-it-works\">How it works</h2>\n<p>There&#39;re 3 HTML layers:</p>\n<pre><code class=\"language-css\"> __________\n/_________/ User HTML\n\n __________\n/_________/ CodeViewer HTML\n\n __________\n/_________/ Basic HTML</code></pre>\n<ul>\n<li>Basic HTML: most basic HTML that receives the data, HTML/CSS/JS strings, for rendering standalone web page from parent HTML.</li>\n</ul>\n<ul>\n<li>CodeViewer HTML: building the user interfaces to update basic HTML, and receiving settings from parent HTML.</li>\n</ul>\n<ul>\n<li>User HTML: yeah, it applies some settings, such as default data or default display mode, on CodeViewer HTML.</li>\n</ul>\n<h2 id=\"how-it-s-built\">How it&#39;s built</h2>\n<p>Based on concepts above, you can already build a <a href=\"https://terry-su.github.io/CDN/CodeViewer/basicVersion/index.html\">simplified CodeViewer HTML</a>, and the <a href=\"https://github.com/Terry-Su/CDN/tree/master/CodeViewer/basicVersion\">source codes</a> are so simple that it doesn&#39;t even need Webpack at all.   </p>\n<p>However, to organize the interaction logic of CodeViewer better, using React and Redux is a good idea. CodeViewer is now using Typescript + React + <a href=\"https://github.com/dvajs/dva\">Dva</a>(a light framework including redux) as development environment.     </p>\n<p>And CodeViewer is deployed simply on a commonly used static server: <a href=\"https://pages.github.com/\">Github(Github Pages)</a>.</p>\n<h2 id=\"where-and-how-to-use-it\">Where and how to use it</h2>\n<p>In fact, you can use it anywhere only if there supports iframe. Specifically, <code>github.io</code> Github pages support iframe, like <a href=\"https://drawjs.github.io\">the official website of a canvas library</a> I wrote before.   </p>\n<p>To bind content with editor, you add content url as a parameter immediately after the CodeViewer url:   &quot;Codeviewer url + <code>?defaultDataUrl=</code> + Content url&quot;</p>\n<p>Then, just insert <code>&lt;iframe src=&quot;your-code-viewer-url&quot;&gt;&lt;/iframe&gt;</code> into your blog or website page.  </p>\n<p>Similarly, you can also configure default display mode. For more detail, visit <a href=\"https://github.com/Terry-Su/CodeViewer\">Codeviewer&#39;s source codes page</a>. </p>\n","createTime":"2018/09/11 00:08","categorySequence":["All","Technology","Project"],"tags":[],"introduction":"Little Bar [https://terry-su.github.io/BlogCDN/images/photo/little-bar.jpg]( Little Bar at ChengDu, China...","uniqueHtmlName":"html,css,js-plus-github-equals-your-own-codepen","blogProps":{"name":"HTML/CSS/JS + Github = Your Own CodePen","createTime":"2018/09/11 00:08","comment":"9"}},{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/CSS/Interesting Things Found in CSS/Interesting Things Found in CSS.md","relativeClientUrl":"blog/detail/interesting-things-found-in-css.html","relativeClientPropsUrl":"All/Technology/CSS/Interesting Things Found in CSS/props.json","name":"Interesting Things Found in CSS","markedHtml":"<p>After reviewing CSS systematically,I&#39;ve found some interesting CSS topics deserved to be wrote down:</p>\n<ul>\n<li>Using only percentage to draw a square</li>\n<li>Specificity-1000 100 10 1</li>\n<li>Properties Inheritable or Not</li>\n<li>Margin collapsing</li>\n<li>Align self</li>\n<li>Box sizing </li>\n<li>Auto</li>\n</ul>\n<h1 id=\"using-only-percentage-to-draw-a-square\">Using only percentage to draw a square</h1>\n<p>Drawing a square by pixel is nothing hard, but have you tried using percentage to draw a square? As you know, browser&#39;s default width and height are not same, so using <code>width: 10%; height: 10%;</code> cannot draw a square definitely. You can get the answer only if you have mastered enough CSS basis:</p>\n<blockquote>\n<p>The size of the <code>margin</code> and <code>padding</code> as a percentage, relative to the <strong>width</strong> of the containing block.</p>\n</blockquote>\n<p>It amazed me when I found this rule first. Why there&#39;s only width? Where&#39;s height? Strange but interesting thing. So, there&#39;re one more answers:</p>\n<ol>\n<li><p><code>width: 0; height: 0; padding: 5%;</code></p>\n</li>\n<li><p><code>width: 10%; height: 0; padding: 5% 0;</code></p>\n</li>\n</ol>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/using-percentage-to-draw-square/index.html?mode=css\" ></iframe>\n\n\n\n<h1 id=\"specificity\">Specificity</h1>\n<p>CSS(Cascading Style Sheets) determines the style of dom, and the specificity of a selector determines whether its style,instead of other selectors&#39; styles, can be attached on dom. Specificities of different selectors are listed on following table.</p>\n<table>\n<thead>\n<tr>\n<th>Selector</th>\n<th>Specificity</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>style</code> attribute of a html tag</td>\n<td>Thousand(1000)</td>\n</tr>\n<tr>\n<td>Id</td>\n<td>Hundread(100)</td>\n</tr>\n<tr>\n<td>Class</td>\n<td>Ten(10)</td>\n</tr>\n<tr>\n<td>Dom element or pseudo-element</td>\n<td>one(1)</td>\n</tr>\n</tbody></table>\n<p>You can find specifities&#39; numbers from top to bottom are: 1000, 100, 10, 10. This number sequence is really easy enough to be remembered. And selectors&#39; order, as commonly used in daily development, can be accepted by us naturally.<br>Therefore, it&#39;s convenient if you&#39;d like to calcuate a selector&#39;s specifiy, just use the formula: <code>m * 1000 + n * 100 + p * 10 + q * 1</code></p>\n<h1 id=\"properties-inheritable-or-not\">Properties Inheritable or Not</h1>\n<p>Someone who has  written countless rows of CSS codes must have found that CSS properties: <code>color</code> and <code>font-size</code> can be inherited but  <code>width</code> and <code>height</code> cannot. Why? Maybe writing repeating proproties does make no sense.\nThank people on stackoverflow, you can find all CSS properties inheritatble or not on <a href=\"https://www.w3.org/TR/CSS21/propidx.html\">this list</a>. </p>\n<h1 id=\"margin-top-and-bottom-collapsing\">Margin(Top and Bottom) collapsing</h1>\n<p>Margin collapsing, only for <strong>top</strong> and <strong>bottom</strong> margins, is a strange behavior that margins of <strong>blocks</strong> are collapsed(combined). There&#39;s my <a href=\"/blogs/details/margin-collapsing-in-css.html\">another article</a> talking about margin collpasing specifically.<br>And normally, collapsed margin&#39;s size is the largest of margins being collapsed.</p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/margin-collapsing/parent-and-first-child/index.html?mode=css\" ></iframe>\n\n\n<h1 id=\"align-self\">Align self</h1>\n<p>If you are familiar with <code>flex</code>, you must often set <code>align-items: center;</code> on flexbox container to align chilren vertical items center. However, how about setting properties directly on children items to align themselves? Property <code>align-self</code> can help it.</p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/flex/align-self/index.html?mode=css\" ></iframe>\n\n<h1 id=\"box-sizing\">Box-sizing</h1>\n<p>Once upon a time, I was someone who didn&#39;t know this property and who had been struggling for some basis CSS layouts. Main difference between two types is whether width and height have fixed values.<br><code>content-box</code> is default type, which means width and height are fixed and padding, border, margin are outside of content.   </p>\n<p><img src=\"https://terry-su.github.io/BlogCDN/images/box-model-box-sizing-content-box.png\" alt=\"content-box\"></p>\n<p>Likewise, <code>border-box</code> means width and height are not fixed, being expanded by inner padding  and border with margin still outside.  </p>\n<p><img src=\"https://terry-su.github.io/BlogCDN/images/box-model-box-sizing-border-box.png\" alt=\"border-box\"></p>\n<h1 id=\"auto\">Auto</h1>\n<p>CSS property value <code>auto</code> would justify some elements properties automatically.Two commonly used situations are:</p>\n<h3 id=\"1-margin-0-auto-for-blocks\">1. <code>margin: 0 auto;</code> for blocks</h3>\n<p>For blocks, centering content can be convenient by setting <code>margin: 0 auto</code>.</p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/auto/align-block-center/index.html?mode=css\" ></iframe>\n\n<h3 id=\"2-margin-left-auto-for-flex-items\">2. <code>margin-left: auto;</code> for flex items</h3>\n<p>There&#39;s no <code>justify-self</code> like <code>align-self</code> for flex container(but grid had) so far. But you could make it by using <code>margin</code> together with <code>auto</code>.</p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/auto/justify-flex-item/index.html?mode=css\" ></iframe>\n\n\n<h1 id=\"summary\">Summary</h1>\n<p>CSS is interesting indeed. Without CSS it would drive lots of front-end developers crazy if they would spend long time to write complex styles like what we have to do for setting the style of canvas now. \nSo far I have just found several interseting things about CSS above, so I would add new things interesting to this article at following time. </p>\n","createTime":"2018/7/17 17:06","categorySequence":["All","Technology","CSS"],"tags":["css"],"introduction":"After reviewing CSS systematically,I've found some interesting CSS topics deserved to be wrote down:...","uniqueHtmlName":"interesting-things-found-in-css","blogProps":{"createTime":"2018/7/17 17:06","tags":["css"],"comment":"8"}},{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/CSS/Margin Collapsing in CSS/Margin Collapsing in CSS.md","relativeClientUrl":"blog/detail/margin-collapsing-in-css.html","relativeClientPropsUrl":"All/Technology/CSS/Margin Collapsing in CSS/props.json","name":"Margin Collapsing in CSS","markedHtml":"<h1 id=\"what-is-margin-collapsing-\">What is margin collapsing?</h1>\n<p>Margin collapsing, only for <strong>top</strong> and <strong>bottom</strong> margins, is a behavior that margins of <strong>blocks</strong> are collapsed(combined).\nNormally, collapsed margin&#39;s size is the largest of margins being collapsed.\nThere&#39;re three cases:</p>\n<ol>\n<li>Adjacent sibling</li>\n</ol>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/margin-collapsing/adajacent/index.html?mode=css\" ></iframe>\n\n\n<ol start=\"2\">\n<li>Parent and first/last child</li>\n</ol>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/margin-collapsing/parent-and-first-child/index.html?mode=css\" ></iframe>\n\n\n<ol start=\"3\">\n<li>Empty blocks</li>\n</ol>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/margin-collapsing/empty-block/index.html?mode=css\" ></iframe>\n\n\n\n<h1 id=\"why-margin-collpasing-\">Why margin collpasing?</h1>\n<p>But why does CSS have such a strange behavior?  </p>\n<p>MDN says only that margins would be shared between boxes when margin collaspsing occurs:</p>\n<blockquote>\n<p> When margin collapsing occurs, the margin area is not clearly defined since margins are shared between boxes.</p>\n</blockquote>\n<p>But why should margins be shared? So I keep searching, and find a resonable explanation. </p>\n<p>Suppose that you had several paragraph(<code>&lt;p/&gt;</code>) to set vertical margins.</p>\n<p>If margins didn&#39;t collapse, they worked like padding(only for positioning part), right? So, here you used padding to mock margin.   </p>\n<p>If you set both <code>padding-top:10px;</code> and <code>padding-bottom:10px;</code> to paragraphs, you would find a problem: most gaps were <code>20px</code>, but the most top gap and the most bottom were <code>10px</code>.</p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/margin-collapsing/example-negative/index.html?mode=css\" ></iframe>\n\n\n<p>What would happen if margins collapse? It turned out all gaps were <code>10px</code>.</p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/margin-collapsing/example-positive/index.html?mode=css\" ></iframe>\n\n\n<p>From example above, margin collpasing does solve some common vertical margin problems and this can be the reason why margin collpases.</p>\n","createTime":"2018/7/17 17:05","categorySequence":["All","Technology","CSS"],"tags":["css"],"introduction":"WHAT IS MARGIN COLLAPSING? Margin collapsing, only for top and bottom margins, is a behavior that margins...","uniqueHtmlName":"margin-collapsing-in-css","blogProps":{"createTime":"2018/7/17 17:05","tags":["css"],"comment":"7"}},{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/CSS/Ordering CSS Properties by Type/Ordering CSS Properties by Type.md","relativeClientUrl":"blog/detail/ordering-css-properties-by-type.html","relativeClientPropsUrl":"All/Technology/CSS/Ordering CSS Properties by Type/props.json","name":"Ordering CSS Properties by Type","markedHtml":"<p>There&#39;re two popular methods to order css properties:</p>\n<ul>\n<li>type</li>\n<li>alphabetic</li>\n</ul>\n<p>Alphabetic order, however, is more suitable for searching rather than classifing css properties. In most situations, we prefer a not only consistent but also clear-type way to order css properties.<br>The following is an ordering example recommended by author:</p>\n<pre><code class=\"language-stylus\">.element\n  /* Position */\n  position absolute\n  left 0\n  top 0\n\n  /* Display &amp; Box model */\n  display flex\n  box-sizing border-box\n  width 500px\n  height 500px\n  padding 5px\n  margin 10px\n  border 1px solid grey\n  border-radius 5px\n  justify-content center\n  align-items center\n\n  /* Text */\n  font-size 16px\n  line-height 20px\n  font-weight bold\n\n  /* Other */\n  cursor pointer\n\n  /* Color */\n  color blue\n  background white</code></pre>\n<p>Absolutely we can justify appropriate types&#39; orders and subordinary types&#39; orders for own best experience of writing css properties. </p>\n","createTime":"2018/6/23 1:57","categorySequence":["All","Technology","CSS"],"tags":["css"],"introduction":"There're two popular methods to order css properties: * type * alphabetic Alphabetic order, however,...","uniqueHtmlName":"ordering-css-properties-by-type","blogProps":{"createTime":"2018/6/23 1:57","tags":["css"],"comment":"6"}},{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/Javascript/Topic/Geometry-Algorithms-in-Javascript/Geometry Algorithm in Javascript.md","relativeClientUrl":"blog/detail/geometry-algorithms-in-javascript.html","relativeClientPropsUrl":"All/Technology/Javascript/Topic/Geometry-Algorithms-in-Javascript/props.json","name":"Geometry Algorithm in Javascript","markedHtml":"<p>Recently, I&#39;ve been learning geo algorithms for developing a geometry library. However, I found that the materials of 2d geometry algorithms on the internet ara <strong>complicated</strong> and <strong>messy</strong> since I only want to find several basic and commonly used algorithms. Here, I will try my best to make 2d geometry algorithms below <strong>easy</strong> to be understood and used. </p>\n<p>By the way, you may not be necessary to read this article paragraph by paragraph, you can just read any topic which you prefer. Here we go!</p>\n<h3 id=\"transformation\">Transformation</h3>\n<h5 id=\"translation\">Translation</h5>\n<p><img src=\"https://www.tutorialspoint.com/computer_graphics/images/translation.jpg\" alt=\"Image\"><br>Suppose we move point&#39;s position from <code>(x, y)</code> to <code>(x&#39;, y&#39;)</code>:</p>\n<pre><code class=\"language-math\">x &#39; = x + t _ x</code></pre>\n<pre><code class=\"language-math\">y &#39; = y + t _ y</code></pre>\n<h5 id=\"scale\">Scale</h5>\n<p><img src=\"https://www.tutorialspoint.com/computer_graphics/images/before_scaling.jpg\" alt=\"Image\"><br><img src=\"https://www.tutorialspoint.com/computer_graphics/images/after_scaling.jpg\" alt=\"Image\"><br>Suppose we scale the <code>x</code> of point by <code>sx</code> times and the <code>y</code> of point by <code>sy</code> times, then:</p>\n<pre><code class=\"language-math\">x &#39; = s _ x * x</code></pre>\n<pre><code class=\"language-math\">y &#39; = s _ y * y</code></pre>\n<blockquote>\n<p><strong>Scale point based on a center point <code>(xc, yc)</code></strong></p>\n<pre><code class=\"language-math\">x &#39; = s _ x * x - ( s _ x * x _ c - x _ c )</code></pre>\n<pre><code class=\"language-math\">y &#39; = s _ y * y - ( s _ y * y _ c - y _ c )</code></pre>\n</blockquote>\n<h5 id=\"rotation\">Rotation</h5>\n<p><img src=\"https://www.tutorialspoint.com/computer_graphics/images/rotation.jpg\" alt=\"Image\"><br>Suppose we rotate <code>OP</code> to <code>OP&#39;</code>.<br>Because:</p>\n<pre><code class=\"language-math\">x = r \\cdot cos \\varphi</code></pre>\n<pre><code class=\"language-math\">y = r \\cdot sin \\varphi</code></pre>\n<p>Then:</p>\n<pre><code class=\"language-math\">x&#39; = r \\cdot cos ( \\varphi + \\theta ) = r \\cdot ( cos \\varphi \\cdot cos \\theta - sin \\varphi \\cdot sin \\theta ) = x \\cdot cos \\theta - y \\cdot sin \\theta</code></pre>\n<pre><code class=\"language-math\">y&#39; = r \\cdot sin ( \\varphi + \\theta ) = r \\cdot ( sin \\varphi \\cdot cos \\theta + cos \\varphi \\cdot sin \\theta ) = x \\cdot sin \\theta + y \\cdot cos \\theta</code></pre>\n<blockquote>\n<p><strong>Rotate point based on a center point <code>(xc, yc)</code></strong></p>\n<pre><code class=\"language-math\">x&#39; =  x \\cdot cos \\theta - y \\cdot sin \\theta + xc</code></pre>\n<pre><code class=\"language-math\">y&#39; = x \\cdot sin \\theta + y \\cdot cos \\theta + yc</code></pre>\n</blockquote>\n<h3 id=\"point-in-polygon\">Point in polygon</h3>\n<p>In fact, there&#39;re two well-known &quot;point in polygon&quot; algorithms: <strong>winding number</strong> and <strong>crossing number</strong>, however, I will only talk about <strong>winding number</strong>, here are reasons:</p>\n<table>\n<thead>\n<tr>\n<th>/</th>\n<th>Rule</th>\n<th>Suitable Scene</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>Winding</strong> number</td>\n<td><a href=\"https://en.wikipedia.org/wiki/Nonzero-rule\">Nonezero-rule</a></td>\n<td>All polygons</td>\n</tr>\n<tr>\n<td>Crossing Number</td>\n<td><a href=\"https://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\">Even-odd rule</a></td>\n<td>Polygons with simple curves</td>\n</tr>\n</tbody></table>\n<p>As we can see above, <strong>crossing number</strong> is not suitable for all polygons.</p>\n<h5 id=\"winding-number\">Winding number</h5>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/8/8f/Winding_Number_Around_Point.svg\" alt=\"Image\"><br>Draw an <strong>infinite ray</strong> from <code>P</code> crossing polygon, then count each <strong>vertex</strong>, here&#39;s the key: suppose we start at any point on polygon path and end at the same point to draw polygon <strong>counterclockwise</strong>, if the <code>vector</code> intersected the <strong>special vertex</strong>(intersected by infinite ray and polygon) is <strong>upward</strong>, <code>wn</code> <strong>adds <code>1</code></strong>, otherwise if the track intersected vertex is <strong>downward</strong>, <code>wn</code> <strong>subtracts <code>1</code></strong>. If the <code>wn</code> of <code>P</code> is not <code>0</code>, then <code>P</code> is <strong>inside</strong> of polygon, otherwise <code>P</code> is <strong>outside</strong>.<br>Main javascript(typescript) <strong>codes</strong>(If you want to see whole detail code, visit <a href=\"https://github.com/Terry-Su/Geometry-Algorithm/blob/master/src/core/calcPointInPolygon.ts\">here</a>):</p>\n<pre><code class=\"language-ts\">/**\n * Check if point P is inside of polygon with winding number algorithm\n * Algorithm: http://geomalgorithms.com/a03-_inclusion.html\n * @param {Point2D} P point P\n * @param {Point2D[]} polygonVertices vertices of polygon path in clockwise or counterclockwise order\n */\nfunction pointInPolygonWindingNumber(\n  P: Point2D,\n  polygonVertices: Point2D[]\n) {\n  /**\n   * Winding nunebr\n   */\n  let wn = 0\n\n  const points: Point2D[] = polygonVertices\n\n  for ( let i: number = 0; i &lt; points.length - 1; i++ ) {\n    const V0: Point2D = points[ i ]\n    const V1: Point2D = points[ i + 1 ]\n\n    const { x: x0, y: y0 }: Point2D = V0\n    const { x: x1, y: y1 }: Point2D = V1\n    const { x: xp, y: yp }: Point2D = P\n\n    /**\n     * Upward\n     */\n    if ( y0 &lt;= yp &amp;&amp; y1 &gt; yp &amp;&amp; isLeft( V0, V1, P ) ) {\n      wn = wn + 1\n    }\n    /**\n     * Downward\n     */\n    if ( y0 &gt; yp &amp;&amp; y1 &lt;= yp &amp;&amp; isRight( V0, V1, P ) ) {\n      wn = wn - 1\n    }\n  }\n\n  const pointOnPolygonPath: boolean = isPointOnPolygonPath( P, points )\n  const res: boolean = pointOnPolygonPath || wn !== 0\n\n  return res\n}</code></pre>\n<h3 id=\"matrix\">Matrix</h3>\n<p>I&#39;m curious about matrices too, not only when learning geometry algorithms. Matrix, which like an magician, transforms geometry with its particular formula.</p>\n<h5 id=\"translation\">Translation</h5>\n<pre><code class=\"language-math\">\\begin{bmatrix}\n   x&#39; \\\\\n   y&#39;\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n   x \\\\\n   y\n\\end{bmatrix}\n+\n\\begin{bmatrix}\n   tx \\\\\n   ty\n\\end{bmatrix}</code></pre>\n<h5 id=\"scale\">Scale</h5>\n<pre><code class=\"language-math\">\\begin{bmatrix}\n   x&#39; \\\\\n   y&#39;\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n   S _ x &amp; 0 \\\\\n   0 &amp; S _ y\n\\end{bmatrix}\n\\begin{bmatrix}\n   x \\\\\n   y\n\\end{bmatrix}</code></pre>\n<h5 id=\"rotation\">Rotation</h5>\n<pre><code class=\"language-math\">\\begin{bmatrix}\n   x&#39; \\\\\n   y&#39;\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n  cos \\theta &amp; -sin \\theta \\\\\n  sin \\theta &amp; cos \\theta\n\\end{bmatrix}\n\\begin{bmatrix}\n   x \\\\\n   y\n\\end{bmatrix}</code></pre>\n<h3 id=\"formulas\">Formulas</h3>\n<p>There are plenty of geometry algorithms, however, I only list several alogorithms which are <strong>frequently used</strong> above. Maybe, I say maybe, I will add new algorithms in this blog if I find new commonly used algorithm in the future. \nNevertheless, I&#39;ll still list some <strong>practical</strong> formulas which can be used for geometry calculation.</p>\n<h5 id=\"the-cosine-law\">The Cosine Law</h5>\n<p>Suppose there are vector v and w</p>\n<pre><code class=\"language-math\">| v \\pm w | ^ 2 = | v | ^ 2 \\pm 2 | v | | w | cos( \\theta ) + | w | ^ 2</code></pre>\n<h5 id=\"the-dot-product\">The Dot Product</h5>\n<p>One vector multiply the other vector:</p>\n<pre><code class=\"language-math\">v \\cdot w = | v | | w | cos ( \\theta )</code></pre>\n<h5 id=\"the-2d-perp-product\">The 2D Perp Product</h5>\n<pre><code class=\"language-math\">v \\perp w = | v | | w | sin ( \\theta )</code></pre>\n<h5 id=\"computing-area\">Computing area</h5>\n<ul>\n<li><p>Parallelogram</p>\n<pre><code class=\"language-math\">A ( \\Box ) = | v \\perp w | </code></pre>\n<pre><code class=\"language-math\">  = |v| |w| sin( \\theta )</code></pre>\n</li>\n<li><p>Triangles</p>\n<pre><code class=\"language-math\">A ( \\vartriangle ) = | v \\perp w | / 2t</code></pre>\n<pre><code class=\"language-math\">  = |v| |w| sin( \\theta ) / 2</code></pre>\n</li>\n</ul>\n<h5 id=\"lines-formula\">Lines formula</h5>\n<ul>\n<li><p>Type-Parametric</p>\n<pre><code class=\"language-math\">P(t) = P _ 0 + t v _ L </code></pre>\n</li>\n<li><p>Line equations</p>\n<pre><code class=\"language-math\">P ( t ) = P _ 0 + t v _ L </code></pre>\n<pre><code class=\"language-math\">  = P _ 0 + t ( P _ 1 - P _ 0 )</code></pre>\n<pre><code class=\"language-math\">  = ( 1 - t ) P _ 0 + t P _ 1</code></pre>\n<pre><code class=\"language-math\">  = ( x _ 0 + t cos \\theta , y _ 0 + t sin \\theta ) </code></pre>\n</li>\n</ul>\n<p>It&#39;s easy to learn and use a geometry library, however, it&#39;s <strong>limited</strong> when we want to build a <strong>large</strong> or complex even just <strong>a little complex project</strong>. Grasping geometry algorithms will make it possible for us to create <strong>flexible</strong> and <strong>large</strong> geometry projects.</p>\n<h3 id=\"reference\">Reference</h3>\n<p>[0] <strong>Transformation:</strong> <a href=\"https://www.tutorialspoint.com/computer_graphics/2d_transformation.htm\">https://www.tutorialspoint.com/computer_graphics/2d_transformation.htm</a><br>[1] <strong>Point in polygon1:</strong> <a href=\"https://en.wikipedia.org/wiki/Point_in_polygon\">https://en.wikipedia.org/wiki/Point_in_polygon</a><br>[2] <strong>Point in polygon2:</strong> <a href=\"http://geomalgorithms.com/a03-_inclusion.html\">http://geomalgorithms.com/a03-_inclusion.html</a><br>[3] <strong>Nonezero-rule:</strong> <a href=\"https://en.wikipedia.org/wiki/Nonzero-rule\">https://en.wikipedia.org/wiki/Nonzero-rule</a><br>[4] <strong>Even-odd rule:</strong> <a href=\"https://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\">https://en.wikipedia.org/wiki/Even%E2%80%93odd_rule</a><br>[5] <strong>Computing area:</strong> <a href=\"http://geomalgorithms.com/a01-_area.html\">http://geomalgorithms.com/a01-_area.html</a><br>[6] <strong>Line formula:</strong> <a href=\"http://geomalgorithms.com/a02-_lines.html\">http://geomalgorithms.com/a02-_lines.html</a>  </p>\n","createTime":"2018/02/12 10:07","categorySequence":["All","Technology","Javascript","Topic"],"tags":["geometry","javascript"],"introduction":"Recently, I've been learning geo algorithms for developing a geometry library. However, I found that...","uniqueHtmlName":"geometry-algorithms-in-javascript","blogProps":{"createTime":"2018/02/12 10:07","tags":["geometry","javascript"],"comment":"5"}},{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/Javascript/ES6/Gist-ES6-Fetch-Usage/Gist - ES6 Fetch Usage.md","relativeClientUrl":"blog/detail/gist-es6-fetch-usage.html","relativeClientPropsUrl":"All/Technology/Javascript/ES6/Gist-ES6-Fetch-Usage/props.json","name":"Gist - ES6 Fetch Usage","markedHtml":"<h1 id=\"introduction\">Introduction</h1>\n<p>Do you prefer the usage of &quot;ES6 Promise&quot;? If you do, you will like the usage of &quot;Fetch&quot; too.<br>Compared to &quot;Ajax&quot;, &quot;Fetch&quot; owns a competitive feature: promise, which synchronize asynchronous methods elegantly, the meaning and the usage of &quot;Fetch&quot;  can be understood easily as well.<br>Here, I&#39;d like to list the most common usage of &quot;Fetch&quot;. </p>\n<h1 id=\"flow\">Flow</h1>\n<p>The flow of fetching stuff is simple:<br><img src=\"https://sfault-image.b0.upaiyun.com/381/502/3815021434-595f6cfd6f71b_articlex\" alt=\"\">   </p>\n<h1 id=\"usage\">Usage</h1>\n<h2 id=\"fetch-once\">Fetch once</h2>\n<p>Suppose we would fetch the content of an remote html</p>\n<pre><code class=\"language-js\">fetch(&#39;./data/test.html&#39;)\n    .then(function (response) {\n        return response.text()    // return a promise \n    })\n    .then(function (body) {\n        console.log( body )    // log: html content\n    })</code></pre>\n<h2 id=\"fetch-data-right-after-the-other-data-fetched-chain-\">Fetch data right after the other data fetched(Chain)</h2>\n<p>If we&#39;d like to fetch data(json) right after fetching content(html)</p>\n<pre><code class=\"language-js\">fetch(&#39;./data/test.html&#39;)\n    .then(response =&gt; {\n        return response.text()\n    })\n    .then(body =&gt; {\n        console.log(body)\n        return fetch(&#39;./data/test.json&#39;)  // return a promise(`fetch(&#39;/url&#39;)` will return a promise ) \n    })\n    .then(response =&gt; {\n        return response.json()  // return a promise too\n    })\n    .then(json =&gt; {\n        console.log(json)  // log: json&#39;s data\n    })</code></pre>\n<h2 id=\"complete-all-fetching-action\">Complete all fetching action</h2>\n<pre><code class=\"language-js\">Promise.all([\n    Promise.resolve(fetch(&#39;./data/test.html&#39;)),\n    Promise.resolve(fetch(&#39;./data/test.json&#39;))\n]).then(data =&gt; {\n    console.log(&#39;Two requests are both completed!&#39;)\n})</code></pre>\n<h1 id=\"api\">API</h1>\n<p><a href=\"https://github.github.io/fetch/\">Github Fetch Document</a><br><a href=\"https://fetch.spec.whatwg.org/\">Offcial Manual</a></p>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>Fetch, well done!</p>\n","createTime":"2017/08/08 22:40","categorySequence":["All","Technology","Javascript","ES6"],"tags":["javascript","es6"],"introduction":"INTRODUCTION Do you prefer the usage of \"ES6 Promise\"? If you do, you will like the usage of \"Fetch\"...","uniqueHtmlName":"gist-es6-fetch-usage","blogProps":{"createTime":"2017/08/08 22:40","tags":["javascript","es6"],"comment":"4"}},{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/Javascript/ES6/Gist-ES6-Proxy/Gist - ES6 Proxy.md","relativeClientUrl":"blog/detail/gist-es6-proxy.html","relativeClientPropsUrl":"All/Technology/Javascript/ES6/Gist-ES6-Proxy/props.json","name":"Gist - ES6 Proxy","markedHtml":"<h1 id=\"introduction\">Introduction</h1>\n<p>&quot;Proxy&quot; is a frequently used pattern in both virtual world and real world. Those patterns(&quot;proxy&quot;, &quot;iterator&quot; and &quot;observer&quot;,etc) make coding more personably, as if we&#39;re building lots of maganificent skyscrapers with robust methods and tools.</p>\n<h1 id=\"basic-concept\">Basic concept</h1>\n<h2 id=\"single-request\">Single request</h2>\n<p><img src=\"https://sfault-image.b0.upaiyun.com/114/495/1144958509-596733a98f665_articlex\" alt=\"\"></p>\n<h2 id=\"interaction\">Interaction</h2>\n<p><img src=\"https://sfault-image.b0.upaiyun.com/368/275/3682758150-596734870a989_articlex\" alt=\"\"></p>\n<h1 id=\"application-observer\">Application - Observer</h1>\n<pre><code class=\"language-js\">// Create an observer to detect the opening state of light\nconst basicState = {\n    open: false\n}\nconst lightState = new Proxy(basicState, {\n    set(obj, prop, value) {\n        if (prop === &#39;open&#39;) {\n            switch(value) {\n                case true: \n                    console.log(&#39;Light on!&#39;)\n                    break\n                case false: \n                    console.log(&#39;Light off!&#39;)\n            }\n        }\n\n        return true\n    }\n})\n\n\n// Turn on light\nlightState.open = true    // output: Light on!\n\n// Turn off light\nlightState.open = false    // output: Light off!</code></pre>\n<h1 id=\"grammar\">Grammar</h1>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>Try Proxy? Trust it at first</p>\n","createTime":"2017/07/13 16:45","categorySequence":["All","Technology","Javascript","ES6"],"tags":["javascript","es6"],"introduction":"INTRODUCTION \"Proxy\" is a frequently used pattern in both virtual world and real world. Those patterns(\"proxy\",...","uniqueHtmlName":"gist-es6-proxy","blogProps":{"createTime":"2017/07/13 16:45","tags":["javascript","es6"],"comment":"3"}},{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/Javascript/ES6/Gist-ES6 Promise/Gist - ES6 Promise.md","relativeClientUrl":"blog/detail/gist-es6-promise.html","relativeClientPropsUrl":"All/Technology/Javascript/ES6/Gist-ES6 Promise/props.json","name":"Gist - ES6 Promise","markedHtml":"<p>Promise is used to <strong>asynchronous computations</strong>.</p>\n<h1 id=\"the-concept-of-promise\">The concept of &quot;Promise&quot;</h1>\n<h1 id=\"introduction\">Introduction</h1>\n<p>&quot;Synchronize asynchronous methods&quot; is always a hot topic.Here, &quot;Promise&quot; is one way to achieve the goal.</p>\n<h1 id=\"promise-model\">Promise Model</h1>\n<h2 id=\"basic-promise-model\">Basic Promise Model</h2>\n<p><img src=\"https://sfault-image.b0.upaiyun.com/513/313/513313002-5957789b7a642_articlex\" alt=\"\">   </p>\n<p>In javascript, it&#39;s like:</p>\n<pre><code class=\"language-js\">// #1 Create a &quot;Promise&quot; object\nconst testPromise = new Promise( (resolve, reject) =&gt; {\n  // resolve(&quot;parameters&quot;) or reject(&quot;parameters&quot;)\n  // example 1: setTimeout(resolve, 1000, &#39;parameters&#39;)\n  // example 2: setTimeout(reject, 1000, &#39;parameters&#39;)\n} )\n\ntestPromise.then( value =&gt; {\n    // #2 Monitor the state of &quot;Promise&quot;, if state is &quot;fulfilled&quot;\n},  value =&gt; {\n    // #2 Monitor the state of &quot;Promise&quot;, if state is &quot;rejected&quot;\n})\n</code></pre>\n<h2 id=\"chaining-promise-model\">Chaining promise model</h2>\n<p><img src=\"https://sfault-image.b0.upaiyun.com/707/453/707453890-595778c082448_articlex\" alt=\"\">  </p>\n<pre><code class=\"language-js\">const testPromise = new Promise( (resolve, reject) =&gt; {\n  // set the state of &quot;Promise&quot; to &quot;fulfilled&quot;\n  resolve()\n} )\n\ntestPromise\n    .then( value =&gt; {\n        // Continue to create &quot;Promise&quot;\n        return new Promise( (resolve, reject) =&gt; {\n            resolve()\n        } )\n    }, value =&gt; {\n    })\n    .then( value =&gt; {\n        // Continue to create &quot;Promise&quot;\n        return new Promise( (resolve, reject) =&gt; {\n        resolve(&#39;parameters&#39;)\n        } )\n    }, value =&gt; {\n    })\n    .then( value =&gt; {\n        console.log(value)  // output: &#39;paramaters&#39;\n    }, value =&gt; {\n    })</code></pre>\n<h1 id=\"grammar\">Grammar</h1>\n<h3 id=\"initialize\">Initialize</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise constructor</a></p>\n<h3 id=\"chain\">Chain</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\">Promise.prototype.then()</a></p>\n<h3 id=\"catch-rejected-reason\">Catch rejected reason</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\">Promise.prototype.catch()</a></p>\n<h3 id=\"resolve-or-reject-parameters-directly\">Resolve or reject parameters directly</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\">Promise.resolve()</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\">Promise.reject()</a></p>\n<h3 id=\"queue\">Queue</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\">Promise.all()</a></p>\n<h3 id=\"apply-fastest-promise\">Apply fastest promise</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\">Promise.race</a></p>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>There must be lots of ways to synchronize asynchronous methods, however, it&#39;s more convenient if a standard emerges so we can build robust program more easily.Obviously, promise is an ideal standard.</p>\n","createTime":"2017/07/01 18:24","categorySequence":["All","Technology","Javascript","ES6"],"tags":["javascript","es6"],"introduction":"Promise is used to asynchronous computations. THE CONCEPT OF \"PROMISE\" INTRODUCTION \"Synchronize asynchronous...","uniqueHtmlName":"gist-es6-promise","blogProps":{"createTime":"2017/07/01 18:24","tags":["javascript","es6"],"comment":"2"}},{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/Javascript/ES6/Gist-ES6-Iterator/Gist - ES6 Iterator.md","relativeClientUrl":"blog/detail/gist-es6-iterator.html","relativeClientPropsUrl":"All/Technology/Javascript/ES6/Gist-ES6-Iterator/props.json","name":"Gist - ES6 Iterator","markedHtml":"<h1 id=\"introduction\">Introduction</h1>\n<p>Iterator is one of the most common design modes in daily development. Let&#39;s explore the iterator continent in the javacript world, here we go!</p>\n<h1 id=\"gist-iterator-mode\">Gist Iterator Mode</h1>\n<p>It&#39;s the basic iterator mode concept:<br><img src=\"https://sfault-image.b0.upaiyun.com/313/415/3134156573-59538bf9ed814_articlex\" alt=\"\"><br>And it&#39;s like this in javascript world:<br><img src=\"https://sfault-image.b0.upaiyun.com/590/033/590033887-59538bd8a3857_articlex\" alt=\"\">    </p>\n<h1 id=\"grammar-rules\">Grammar rules</h1>\n<h2 id=\"attention\">Attention</h2>\n<p>Assume that &quot;iterable&quot; is an adjective, and &quot;iterableFn&quot; is a iterable.<br>It&#39;s a little confusing when lots of &quot;iterable&quot; appear at the same time.</p>\n<h2 id=\"relation-between-iterable-and-iterator\">Relation between iterable and iterator</h2>\n<p>Iterator can be created by iterableFn(an iterable), iterableFn belongs to iterable sources.</p>\n<h2 id=\"iterables\">Iterables</h2>\n<h3 id=\"iterable-sources\">Iterable sources</h3>\n<ul>\n<li>Array</li>\n<li>String</li>\n<li>Map</li>\n<li>Set</li>\n<li>Dom Elements</li>\n<li>Arguments</li>\n</ul>\n<h3 id=\"get-iterablefn-used-to-generate-iterator-\">Get iterableFn(used to generate iterator)</h3>\n<p>IterableFn can be derived from iterable source by its property: Symbol.iterator, for example: <code>const iterableFn = [][Symbol.iterator]</code></p>\n<blockquote>\n<p><strong>Symbol.iterator</strong>\nA method that returns the default Iterator for an object. Called by the semantics of the for-of statement.</p>\n</blockquote>\n<pre><code class=\"language-js\">/** Test in chrome 55  **/\n// Array\nconsole.log( [][Symbol.iterator] )    // function values() { [native code] }\n\n// String\nconsole.log( &#39;&#39;[Symbol.iterator] )    // function [Symbol.iterator]() { [native code] }\n\n// Map\nconsole.log( new Map([[]])[Symbol.iterator] )    // function entries() { [native code] }\n\n// Set\nconsole.log( new Set([])[Symbol.iterator] )    // function values() { [native code] }\n\n// Dom elements\nconsole.log( document.getElementsByTagName(&#39;body&#39;)[Symbol.iterator] )    // function values() { [native code] }\n\n// arguments\nfunction test() {\n    console.log( arguments[Symbol.iterator] )\n}\ntest(1, 2, 3)    // // function values() { [native code] }</code></pre>\n<h3 id=\"iterable-sources-consumers\">Iterable sources&#39; consumers</h3>\n<p>Follow consumers&#39; implementations mainly depend on iterables.Howerver, the examples are irrelevant to topic.</p>\n<ul>\n<li>for of<pre><code class=\"language-js\">for(const i in [1, 2]) {\n  cosnole.log(i)\n}     \n  // 1\n  // 2</code></pre>\n</li>\n<li>...(The spread opeartor)<pre><code class=\"language-js\">console.log( [...&quot;ab&quot;] )     // [&quot;a&quot;, &quot;b&quot;]</code></pre>\n</li>\n<li>Array.from<pre><code class=\"language-js\">console.log( Array.from(&quot;ab&quot;) )    // [&quot;a&quot;, &quot;b&quot;]</code></pre>\n</li>\n</ul>\n<h2 id=\"iterators\">Iterators</h2>\n<p>Iterator is common used, as to decouple algorithms.</p>\n<h3 id=\"iterator-iterablefn-\">Iterator = iterableFn()</h3>\n<p>After iterable&#39;s implementation, it returns an object called iterator, which uses &quot;next&quot; method to iterate.</p>\n<pre><code class=\"language-js\">/** Test in chrome 55  **/\n// Array\nconsole.log( [][Symbol.iterator]() )    // ArrayIterator {}\n\n// String\nconsole.log( &#39;&#39;[Symbol.iterator]() )    //  StringIterator {}\n\n// Map\nconsole.log( new Map([[]])[Symbol.iterator]() )    // MapIterator {[undefined, undefined]}\n\n// Set\nconsole.log( new Set([])[Symbol.iterator]() )    // SetIterator {}\n\n// Dom elements\nconsole.log( document.getElementsByTagName(&#39;body&#39;)[Symbol.iterator]() )    // ArrayIterator {}\n\n// arguments\nfunction test() {\n    console.log( arguments[Symbol.iterator]() )\n}\ntest(1, 2, 3)    // ArrayIterator {}</code></pre>\n<p>Add value and Implement method &quot;next&quot;:</p>\n<pre><code class=\"language-js\">/** Test in chrome 55  **/\n// Array\nconsole.log( [1, 2][Symbol.iterator]().next() )    // {value: 1, done: false}\n\n// String\nconsole.log( &#39;ab&#39;[Symbol.iterator]().next() )    //  {value: &#39;a&#39;, done: false}\n\n// Map\nconsole.log( new Map([[1, &#39;a&#39;]])[Symbol.iterator]().next() )    // {value: [1, &#39;a&#39;], done: false}\n\n// Set\nconsole.log( new Set([1, 1, 2])[Symbol.iterator]().next() )    // {value1: , done: false}\n\n// Dom elements\nconsole.log( document.getElementsByTagName(&#39;body&#39;)[Symbol.iterator]().next() )    // {value: body(dom), done: false}\n\n// arguments\nfunction test() {\n    console.log( arguments[Symbol.iterator]().next() )\n}\ntest(1, 2, 3)    // {value: 1, done: false}</code></pre>\n<h3 id=\"iterator-generator-\">Iterator = generator()</h3>\n<p>Setting iterator mutually again and again seems inefficient, syntactic sugar is needed. Fortunately, ES6 provides the useful &quot;generater&quot;</p>\n<pre><code class=\"language-js\">function* iteratorMaker() {\n    yield 1\n    yield 2\n}\n\nconst iterator =  iteratorMaker()\n\nconsole.log( iterator )    // iteratorMaker {[[GeneratorStatus]]: &quot;suspended&quot;, [[GeneratorReceiver]]: Window, [[GeneratorLocation]]: Object}\n\nconsole.log( iterator.next() )    // {value: 1, done: false}\n\nconsole.log( iterator.next() )    // {value: 2, done: false}\n\nconsole.log( iterator.next() )    // {value: undefined, done: true}</code></pre>\n<h1 id=\"application\">Application</h1>\n<p>Iterator can be applied in wide situations, there&#39;s a sample to generate increasing id numbers.</p>\n<pre><code class=\"language-js\">function* idIteratorMaker() {\n    let id = 0\n    while (true) {\n        yield id++\n    }\n}\n\nfunction create(idIterator) {\n    return idIterator.next().value\n}\n\nconst idIterator = idIteratorMaker()\n\nconst a = create(idIterator)\nconst b = create(idIterator)\nconst c = create(idIterator)\n\nconsole.log(a)     // 0\nconsole.log(b)     // 1\nconsole.log(c)     // 2</code></pre>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>Obviously, iterator makes codes more readable and matainable.  </p>\n<h1 id=\"reference\">Reference</h1>\n<ol>\n<li><a href=\"http://exploringjs.com/es6/ch_iteration.html#sec_iterating-language-constructs\">http://exploringjs.com/es6/ch_iteration.html#sec_iterating-language-constructs</a>  </li>\n<li><a href=\"https://tc39.github.io/ecma262/#table-1\">https://tc39.github.io/ecma262/#table-1</a></li>\n</ol>\n","createTime":"2017/07/01 14:57","categorySequence":["All","Technology","Javascript","ES6"],"tags":["javascript","es6"],"introduction":"INTRODUCTION Iterator is one of the most common design modes in daily development. Let's explore the...","uniqueHtmlName":"gist-es6-iterator","blogProps":{"createTime":"2017/07/01 14:57","tags":["javascript","es6"],"comment":"1"}}]}
