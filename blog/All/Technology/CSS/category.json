{"blogs":[{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/CSS/Common Flex Use Cases/Common Flex Use Cases.md","relativeClientUrl":"blog/detail/common-flex-use-cases.html","relativeClientPropsUrl":"All/Technology/CSS/Common Flex Use Cases/props.json","name":"Common Flex Use Cases","markedHtml":"<p>Flex is very useful and commonly used in daily development, here summarizes several common use cases:</p>\n<ul>\n<li>navigation</li>\n<li>center an element horizontally or vertically</li>\n<li>together with input</li>\n<li>responsive website layout</li>\n<li>display icons in multi-lines </li>\n</ul>\n<h2 id=\"navigation\">Navigation</h2>\n<br />\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/flex/comon-layouts/navigation/index.html?mode=css\"></iframe>\n\n\n<h2 id=\"center-an-element-horizontally-or-vertically\">Center an Element Horizontally or Vertically</h2>\n<br />\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/flex/comon-layouts/center/index.html?mode=css\"></iframe>\n\n<p>Btw, using <code>place-items: center</code> in grid layout to center an element is more elegant.</p>\n<pre><code class=\"language-css\">.container {\n  display: grid;\n  place-items: center;\n  ...\n}\n...</code></pre>\n<h2 id=\"together-with-input\">Together with Input</h2>\n<p>Input&#39;s width is adjusted automatically.\n<br />  </p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/flex/comon-layouts/together-with-input/index.html?mode=css\"></iframe>\n\n\n\n<h2 id=\"responsive-website-layout\">Responsive Website Layout</h2>\n<p>One side&#39;s with is fixed, the other is flexible.\n<br />  </p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/flex/comon-layouts/responsive/index.html?mode=css\"></iframe>\n\n\n<h2 id=\"display-icons-in-multi-lines\">Display Icons in Multi-lines</h2>\n<p><br />  </p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/flex/comon-layouts/display-items/index.html?mode=css\"></iframe>\n","createTime":"2019/2/12 16:12","categorySequence":["All","Technology","CSS"],"tags":["css"],"introduction":"Flex is very useful and commonly used in daily development, here summarizes several common use cases:...","uniqueHtmlName":"common-flex-use-cases","blogProps":{"createTime":"2019/2/12 16:12","tags":["css"],"comment":"16"}},{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/CSS/Interesting Things Found in CSS/Interesting Things Found in CSS.md","relativeClientUrl":"blog/detail/interesting-things-found-in-css.html","relativeClientPropsUrl":"All/Technology/CSS/Interesting Things Found in CSS/props.json","name":"Interesting Things Found in CSS","markedHtml":"<p>After reviewing CSS systematically,I&#39;ve found some interesting CSS topics deserved to be wrote down:</p>\n<ul>\n<li>Using only percentage to draw a square</li>\n<li>Specificity-1000 100 10 1</li>\n<li>Properties Inheritable or Not</li>\n<li>Margin collapsing</li>\n<li>Align self</li>\n<li>Box sizing </li>\n<li>Auto</li>\n</ul>\n<h1 id=\"using-only-percentage-to-draw-a-square\">Using only percentage to draw a square</h1>\n<p>Drawing a square by pixel is nothing hard, but have you tried using percentage to draw a square? As you know, browser&#39;s default width and height are not same, so using <code>width: 10%; height: 10%;</code> cannot draw a square definitely. You can get the answer only if you have mastered enough CSS basis:</p>\n<blockquote>\n<p>The size of the <code>margin</code> and <code>padding</code> as a percentage, relative to the <strong>width</strong> of the containing block.</p>\n</blockquote>\n<p>It amazed me when I found this rule first. Why there&#39;s only width? Where&#39;s height? Strange but interesting thing. So, there&#39;re one more answers:</p>\n<ol>\n<li><p><code>width: 0; height: 0; padding: 5%;</code></p>\n</li>\n<li><p><code>width: 10%; height: 0; padding: 5% 0;</code></p>\n</li>\n</ol>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/using-percentage-to-draw-square/index.html?mode=css\" ></iframe>\n\n\n\n<h1 id=\"specificity\">Specificity</h1>\n<p>CSS(Cascading Style Sheets) determines the style of dom, and the specificity of a selector determines whether its style,instead of other selectors&#39; styles, can be attached on dom. Specificities of different selectors are listed on following table.</p>\n<table>\n<thead>\n<tr>\n<th>Selector</th>\n<th>Specificity</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>style</code> attribute of a html tag</td>\n<td>Thousand(1000)</td>\n</tr>\n<tr>\n<td>Id</td>\n<td>Hundread(100)</td>\n</tr>\n<tr>\n<td>Class</td>\n<td>Ten(10)</td>\n</tr>\n<tr>\n<td>Dom element or pseudo-element</td>\n<td>one(1)</td>\n</tr>\n</tbody></table>\n<p>You can find specifities&#39; numbers from top to bottom are: 1000, 100, 10, 10. This number sequence is really easy enough to be remembered. And selectors&#39; order, as commonly used in daily development, can be accepted by us naturally.<br>Therefore, it&#39;s convenient if you&#39;d like to calcuate a selector&#39;s specifiy, just use the formula: <code>m * 1000 + n * 100 + p * 10 + q * 1</code></p>\n<h1 id=\"properties-inheritable-or-not\">Properties Inheritable or Not</h1>\n<p>Someone who has  written countless rows of CSS codes must have found that CSS properties: <code>color</code> and <code>font-size</code> can be inherited but  <code>width</code> and <code>height</code> cannot. Why? Maybe writing repeating proproties does make no sense.\nThank people on stackoverflow, you can find all CSS properties inheritatble or not on <a href=\"https://www.w3.org/TR/CSS21/propidx.html\">this list</a>. </p>\n<h1 id=\"margin-top-and-bottom-collapsing\">Margin(Top and Bottom) collapsing</h1>\n<p>Margin collapsing, only for <strong>top</strong> and <strong>bottom</strong> margins, is a strange behavior that margins of <strong>blocks</strong> are collapsed(combined). There&#39;s my <a href=\"/blogs/details/margin-collapsing-in-css.html\">another article</a> talking about margin collpasing specifically.<br>And normally, collapsed margin&#39;s size is the largest of margins being collapsed.</p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/margin-collapsing/parent-and-first-child/index.html?mode=css\" ></iframe>\n\n\n<h1 id=\"align-self\">Align self</h1>\n<p>If you are familiar with <code>flex</code>, you must often set <code>align-items: center;</code> on flexbox container to align chilren vertical items center. However, how about setting properties directly on children items to align themselves? Property <code>align-self</code> can help it.</p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/flex/align-self/index.html?mode=css\" ></iframe>\n\n<h1 id=\"box-sizing\">Box-sizing</h1>\n<p>Once upon a time, I was someone who didn&#39;t know this property and who had been struggling for some basis CSS layouts. Main difference between two types is whether width and height have fixed values.<br><code>content-box</code> is default type, which means width and height are fixed and padding, border, margin are outside of content.   </p>\n<p><img src=\"https://terry-su.github.io/BlogCDN/images/box-model-box-sizing-content-box.png\" alt=\"content-box\"></p>\n<p>Likewise, <code>border-box</code> means width and height are not fixed, being expanded by inner padding  and border with margin still outside.  </p>\n<p><img src=\"https://terry-su.github.io/BlogCDN/images/box-model-box-sizing-border-box.png\" alt=\"border-box\"></p>\n<h1 id=\"auto\">Auto</h1>\n<p>CSS property value <code>auto</code> would justify some elements properties automatically.Two commonly used situations are:</p>\n<h3 id=\"1-margin-0-auto-for-blocks\">1. <code>margin: 0 auto;</code> for blocks</h3>\n<p>For blocks, centering content can be convenient by setting <code>margin: 0 auto</code>.</p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/auto/align-block-center/index.html?mode=css\" ></iframe>\n\n<h3 id=\"2-margin-left-auto-for-flex-items\">2. <code>margin-left: auto;</code> for flex items</h3>\n<p>There&#39;s no <code>justify-self</code> like <code>align-self</code> for flex container(but grid had) so far. But you could make it by using <code>margin</code> together with <code>auto</code>.</p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/auto/justify-flex-item/index.html?mode=css\" ></iframe>\n\n\n<h1 id=\"summary\">Summary</h1>\n<p>CSS is interesting indeed. Without CSS it would drive lots of front-end developers crazy if they would spend long time to write complex styles like what we have to do for setting the style of canvas now. \nSo far I have just found several interseting things about CSS above, so I would add new things interesting to this article at following time. </p>\n","createTime":"2018/7/17 17:06","categorySequence":["All","Technology","CSS"],"tags":["css"],"introduction":"After reviewing CSS systematically,I've found some interesting CSS topics deserved to be wrote down:...","uniqueHtmlName":"interesting-things-found-in-css","blogProps":{"createTime":"2018/7/17 17:06","tags":["css"],"comment":"8"}},{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/CSS/Margin Collapsing in CSS/Margin Collapsing in CSS.md","relativeClientUrl":"blog/detail/margin-collapsing-in-css.html","relativeClientPropsUrl":"All/Technology/CSS/Margin Collapsing in CSS/props.json","name":"Margin Collapsing in CSS","markedHtml":"<h1 id=\"what-is-margin-collapsing-\">What is margin collapsing?</h1>\n<p>Margin collapsing, only for <strong>top</strong> and <strong>bottom</strong> margins, is a behavior that margins of <strong>blocks</strong> are collapsed(combined).\nNormally, collapsed margin&#39;s size is the largest of margins being collapsed.\nThere&#39;re three cases:</p>\n<ol>\n<li>Adjacent sibling</li>\n</ol>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/margin-collapsing/adajacent/index.html?mode=css\" ></iframe>\n\n\n<ol start=\"2\">\n<li>Parent and first/last child</li>\n</ol>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/margin-collapsing/parent-and-first-child/index.html?mode=css\" ></iframe>\n\n\n<ol start=\"3\">\n<li>Empty blocks</li>\n</ol>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/margin-collapsing/empty-block/index.html?mode=css\" ></iframe>\n\n\n\n<h1 id=\"why-margin-collpasing-\">Why margin collpasing?</h1>\n<p>But why does CSS have such a strange behavior?  </p>\n<p>MDN says only that margins would be shared between boxes when margin collaspsing occurs:</p>\n<blockquote>\n<p> When margin collapsing occurs, the margin area is not clearly defined since margins are shared between boxes.</p>\n</blockquote>\n<p>But why should margins be shared? So I keep searching, and find a resonable explanation. </p>\n<p>Suppose that you had several paragraph(<code>&lt;p/&gt;</code>) to set vertical margins.</p>\n<p>If margins didn&#39;t collapse, they worked like padding(only for positioning part), right? So, here you used padding to mock margin.   </p>\n<p>If you set both <code>padding-top:10px;</code> and <code>padding-bottom:10px;</code> to paragraphs, you would find a problem: most gaps were <code>20px</code>, but the most top gap and the most bottom were <code>10px</code>.</p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/margin-collapsing/example-negative/index.html?mode=css\" ></iframe>\n\n\n<p>What would happen if margins collapse? It turned out all gaps were <code>10px</code>.</p>\n<iframe src=\"https://terry-su.github.io/BlogCDN/iframes/css/margin-collapsing/example-positive/index.html?mode=css\" ></iframe>\n\n\n<p>From example above, margin collpasing does solve some common vertical margin problems and this can be the reason why margin collpases.</p>\n","createTime":"2018/7/17 17:05","categorySequence":["All","Technology","CSS"],"tags":["css"],"introduction":"WHAT IS MARGIN COLLAPSING? Margin collapsing, only for top and bottom margins, is a behavior that margins...","uniqueHtmlName":"margin-collapsing-in-css","blogProps":{"createTime":"2018/7/17 17:05","tags":["css"],"comment":"7"}},{"path":"/Users/suxing/Documents/TheWorkingDocuments/Item/Terry-Su.github.io/EN-Blogs/Technology/CSS/Ordering CSS Properties by Type/Ordering CSS Properties by Type.md","relativeClientUrl":"blog/detail/ordering-css-properties-by-type.html","relativeClientPropsUrl":"All/Technology/CSS/Ordering CSS Properties by Type/props.json","name":"Ordering CSS Properties by Type","markedHtml":"<p>There&#39;re two popular methods to order css properties:</p>\n<ul>\n<li>type</li>\n<li>alphabetic</li>\n</ul>\n<p>Alphabetic order, however, is more suitable for searching rather than classifing css properties. In most situations, we prefer a not only consistent but also clear-type way to order css properties.<br>The following is an ordering example recommended by author:</p>\n<pre><code class=\"language-stylus\">.element\n  /* Position */\n  position absolute\n  left 0\n  top 0\n\n  /* Display &amp; Box model */\n  display flex\n  box-sizing border-box\n  width 500px\n  height 500px\n  padding 5px\n  margin 10px\n  border 1px solid grey\n  border-radius 5px\n  justify-content center\n  align-items center\n\n  /* Text */\n  font-size 16px\n  line-height 20px\n  font-weight bold\n\n  /* Other */\n  cursor pointer\n\n  /* Color */\n  color blue\n  background white</code></pre>\n<p>Absolutely we can justify appropriate types&#39; orders and subordinary types&#39; orders for own best experience of writing css properties. </p>\n","createTime":"2018/6/23 1:57","categorySequence":["All","Technology","CSS"],"tags":["css"],"introduction":"There're two popular methods to order css properties: * type * alphabetic Alphabetic order, however,...","uniqueHtmlName":"ordering-css-properties-by-type","blogProps":{"createTime":"2018/6/23 1:57","tags":["css"],"comment":"6"}}]}
