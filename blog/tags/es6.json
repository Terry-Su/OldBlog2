{"blogs":[{"relativeClientUrl":"blog/detail/gist-es6-fetch-usage.html","name":"Gist - ES6 Fetch Usage","markedHtml":"<h1 id=\"introduction\">Introduction</h1>\n<p>Do you prefer the usage of &quot;ES6 Promise&quot;? If you do, you will like the usage of &quot;Fetch&quot; too.<br>Compared to &quot;Ajax&quot;, &quot;Fetch&quot; owns a competitive feature: promise, which synchronize asynchronous methods elegantly, the meaning and the usage of &quot;Fetch&quot;  can be understood easily as well.<br>Here, I&#39;d like to list the most common usage of &quot;Fetch&quot;. </p>\n<h1 id=\"flow\">Flow</h1>\n<p>The flow of fetching stuff is simple:<br><img src=\"https://sfault-image.b0.upaiyun.com/381/502/3815021434-595f6cfd6f71b_articlex\" alt=\"\">   </p>\n<h1 id=\"usage\">Usage</h1>\n<h2 id=\"fetch-once\">Fetch once</h2>\n<p>Suppose we would fetch the content of an remote html</p>\n<pre><code class=\"language-js\">fetch(&#39;./data/test.html&#39;)\n    .then(function (response) {\n        return response.text()    // return a promise \n    })\n    .then(function (body) {\n        console.log( body )    // log: html content\n    })</code></pre>\n<h2 id=\"fetch-data-right-after-the-other-data-fetched-chain-\">Fetch data right after the other data fetched(Chain)</h2>\n<p>If we&#39;d like to fetch data(json) right after fetching content(html)</p>\n<pre><code class=\"language-js\">fetch(&#39;./data/test.html&#39;)\n    .then(response =&gt; {\n        return response.text()\n    })\n    .then(body =&gt; {\n        console.log(body)\n        return fetch(&#39;./data/test.json&#39;)  // return a promise(`fetch(&#39;/url&#39;)` will return a promise ) \n    })\n    .then(response =&gt; {\n        return response.json()  // return a promise too\n    })\n    .then(json =&gt; {\n        console.log(json)  // log: json&#39;s data\n    })</code></pre>\n<h2 id=\"complete-all-fetching-action\">Complete all fetching action</h2>\n<pre><code class=\"language-js\">Promise.all([\n    Promise.resolve(fetch(&#39;./data/test.html&#39;)),\n    Promise.resolve(fetch(&#39;./data/test.json&#39;))\n]).then(data =&gt; {\n    console.log(&#39;Two requests are both completed!&#39;)\n})</code></pre>\n<h1 id=\"api\">API</h1>\n<p><a href=\"https://github.github.io/fetch/\">Github Fetch Document</a><br><a href=\"https://fetch.spec.whatwg.org/\">Offcial Manual</a></p>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>Fetch, well done!</p>\n","createTime":"2017/08/08 22:40","categorySequence":["All","Technology","Javascript","ES6"],"introduction":"INTRODUCTION Do you prefer the usage of \"ES6 Promise\"? If you do, you will like the usage of \"Fetch\"...","uniqueHtmlName":"gist-es6-fetch-usage","blogProps":{"createTime":"2017/08/08 22:40","tags":["javascript","es6"],"comment":"4"}},{"relativeClientUrl":"blog/detail/gist-es6-proxy.html","name":"Gist - ES6 Proxy","markedHtml":"<h1 id=\"introduction\">Introduction</h1>\n<p>&quot;Proxy&quot; is a frequently used pattern in both virtual world and real world. Those patterns(&quot;proxy&quot;, &quot;iterator&quot; and &quot;observer&quot;,etc) make coding more personably, as if we&#39;re building lots of maganificent skyscrapers with robust methods and tools.</p>\n<h1 id=\"basic-concept\">Basic concept</h1>\n<h2 id=\"single-request\">Single request</h2>\n<p><img src=\"https://sfault-image.b0.upaiyun.com/114/495/1144958509-596733a98f665_articlex\" alt=\"\"></p>\n<h2 id=\"interaction\">Interaction</h2>\n<p><img src=\"https://sfault-image.b0.upaiyun.com/368/275/3682758150-596734870a989_articlex\" alt=\"\"></p>\n<h1 id=\"application-observer\">Application - Observer</h1>\n<pre><code class=\"language-js\">// Create an observer to detect the opening state of light\nconst basicState = {\n    open: false\n}\nconst lightState = new Proxy(basicState, {\n    set(obj, prop, value) {\n        if (prop === &#39;open&#39;) {\n            switch(value) {\n                case true: \n                    console.log(&#39;Light on!&#39;)\n                    break\n                case false: \n                    console.log(&#39;Light off!&#39;)\n            }\n        }\n\n        return true\n    }\n})\n\n\n// Turn on light\nlightState.open = true    // output: Light on!\n\n// Turn off light\nlightState.open = false    // output: Light off!</code></pre>\n<h1 id=\"grammar\">Grammar</h1>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>Try Proxy? Trust it at first</p>\n","createTime":"2017/07/13 16:45","categorySequence":["All","Technology","Javascript","ES6"],"introduction":"INTRODUCTION \"Proxy\" is a frequently used pattern in both virtual world and real world. Those patterns(\"proxy\",...","uniqueHtmlName":"gist-es6-proxy","blogProps":{"createTime":"2017/07/13 16:45","tags":["javascript","es6"],"comment":"3"}},{"relativeClientUrl":"blog/detail/gist-es6-promise.html","name":"Gist - ES6 Promise","markedHtml":"<p>Promise is used to <strong>asynchronous computations</strong>.</p>\n<h1 id=\"the-concept-of-promise\">The concept of &quot;Promise&quot;</h1>\n<h1 id=\"introduction\">Introduction</h1>\n<p>&quot;Synchronize asynchronous methods&quot; is always a hot topic.Here, &quot;Promise&quot; is one way to achieve the goal.</p>\n<h1 id=\"promise-model\">Promise Model</h1>\n<h2 id=\"basic-promise-model\">Basic Promise Model</h2>\n<p><img src=\"https://sfault-image.b0.upaiyun.com/513/313/513313002-5957789b7a642_articlex\" alt=\"\">   </p>\n<p>In javascript, it&#39;s like:</p>\n<pre><code class=\"language-js\">// #1 Create a &quot;Promise&quot; object\nconst testPromise = new Promise( (resolve, reject) =&gt; {\n  // resolve(&quot;parameters&quot;) or reject(&quot;parameters&quot;)\n  // example 1: setTimeout(resolve, 1000, &#39;parameters&#39;)\n  // example 2: setTimeout(reject, 1000, &#39;parameters&#39;)\n} )\n\ntestPromise.then( value =&gt; {\n    // #2 Monitor the state of &quot;Promise&quot;, if state is &quot;fulfilled&quot;\n},  value =&gt; {\n    // #2 Monitor the state of &quot;Promise&quot;, if state is &quot;rejected&quot;\n})\n</code></pre>\n<h2 id=\"chaining-promise-model\">Chaining promise model</h2>\n<p><img src=\"https://sfault-image.b0.upaiyun.com/707/453/707453890-595778c082448_articlex\" alt=\"\">  </p>\n<pre><code class=\"language-js\">const testPromise = new Promise( (resolve, reject) =&gt; {\n  // set the state of &quot;Promise&quot; to &quot;fulfilled&quot;\n  resolve()\n} )\n\ntestPromise\n    .then( value =&gt; {\n        // Continue to create &quot;Promise&quot;\n        return new Promise( (resolve, reject) =&gt; {\n            resolve()\n        } )\n    }, value =&gt; {\n    })\n    .then( value =&gt; {\n        // Continue to create &quot;Promise&quot;\n        return new Promise( (resolve, reject) =&gt; {\n        resolve(&#39;parameters&#39;)\n        } )\n    }, value =&gt; {\n    })\n    .then( value =&gt; {\n        console.log(value)  // output: &#39;paramaters&#39;\n    }, value =&gt; {\n    })</code></pre>\n<h1 id=\"grammar\">Grammar</h1>\n<h3 id=\"initialize\">Initialize</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise constructor</a></p>\n<h3 id=\"chain\">Chain</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\">Promise.prototype.then()</a></p>\n<h3 id=\"catch-rejected-reason\">Catch rejected reason</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\">Promise.prototype.catch()</a></p>\n<h3 id=\"resolve-or-reject-parameters-directly\">Resolve or reject parameters directly</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\">Promise.resolve()</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\">Promise.reject()</a></p>\n<h3 id=\"queue\">Queue</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\">Promise.all()</a></p>\n<h3 id=\"apply-fastest-promise\">Apply fastest promise</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\">Promise.race</a></p>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>There must be lots of ways to synchronize asynchronous methods, however, it&#39;s more convenient if a standard emerges so we can build robust program more easily.Obviously, promise is an ideal standard.</p>\n","createTime":"2017/07/01 18:24","categorySequence":["All","Technology","Javascript","ES6"],"introduction":"Promise is used to asynchronous computations. THE CONCEPT OF \"PROMISE\" INTRODUCTION \"Synchronize asynchronous...","uniqueHtmlName":"gist-es6-promise","blogProps":{"createTime":"2017/07/01 18:24","tags":["javascript","es6"],"comment":"2"}},{"relativeClientUrl":"blog/detail/gist-es6-iterator.html","name":"Gist - ES6 Iterator","markedHtml":"<h1 id=\"introduction\">Introduction</h1>\n<p>Iterator is one of the most common design modes in daily development. Let&#39;s explore the iterator continent in the javacript world, here we go!</p>\n<h1 id=\"gist-iterator-mode\">Gist Iterator Mode</h1>\n<p>It&#39;s the basic iterator mode concept:<br><img src=\"https://sfault-image.b0.upaiyun.com/313/415/3134156573-59538bf9ed814_articlex\" alt=\"\"><br>And it&#39;s like this in javascript world:<br><img src=\"https://sfault-image.b0.upaiyun.com/590/033/590033887-59538bd8a3857_articlex\" alt=\"\">    </p>\n<h1 id=\"grammar-rules\">Grammar rules</h1>\n<h2 id=\"attention\">Attention</h2>\n<p>Assume that &quot;iterable&quot; is an adjective, and &quot;iterableFn&quot; is a iterable.<br>It&#39;s a little confusing when lots of &quot;iterable&quot; appear at the same time.</p>\n<h2 id=\"relation-between-iterable-and-iterator\">Relation between iterable and iterator</h2>\n<p>Iterator can be created by iterableFn(an iterable), iterableFn belongs to iterable sources.</p>\n<h2 id=\"iterables\">Iterables</h2>\n<h3 id=\"iterable-sources\">Iterable sources</h3>\n<ul>\n<li>Array</li>\n<li>String</li>\n<li>Map</li>\n<li>Set</li>\n<li>Dom Elements</li>\n<li>Arguments</li>\n</ul>\n<h3 id=\"get-iterablefn-used-to-generate-iterator-\">Get iterableFn(used to generate iterator)</h3>\n<p>IterableFn can be derived from iterable source by its property: Symbol.iterator, for example: <code>const iterableFn = [][Symbol.iterator]</code></p>\n<blockquote>\n<p><strong>Symbol.iterator</strong>\nA method that returns the default Iterator for an object. Called by the semantics of the for-of statement.</p>\n</blockquote>\n<pre><code class=\"language-js\">/** Test in chrome 55  **/\n// Array\nconsole.log( [][Symbol.iterator] )    // function values() { [native code] }\n\n// String\nconsole.log( &#39;&#39;[Symbol.iterator] )    // function [Symbol.iterator]() { [native code] }\n\n// Map\nconsole.log( new Map([[]])[Symbol.iterator] )    // function entries() { [native code] }\n\n// Set\nconsole.log( new Set([])[Symbol.iterator] )    // function values() { [native code] }\n\n// Dom elements\nconsole.log( document.getElementsByTagName(&#39;body&#39;)[Symbol.iterator] )    // function values() { [native code] }\n\n// arguments\nfunction test() {\n    console.log( arguments[Symbol.iterator] )\n}\ntest(1, 2, 3)    // // function values() { [native code] }</code></pre>\n<h3 id=\"iterable-sources-consumers\">Iterable sources&#39; consumers</h3>\n<p>Follow consumers&#39; implementations mainly depend on iterables.Howerver, the examples are irrelevant to topic.</p>\n<ul>\n<li>for of<pre><code class=\"language-js\">for(const i in [1, 2]) {\n  cosnole.log(i)\n}     \n  // 1\n  // 2</code></pre>\n</li>\n<li>...(The spread opeartor)<pre><code class=\"language-js\">console.log( [...&quot;ab&quot;] )     // [&quot;a&quot;, &quot;b&quot;]</code></pre>\n</li>\n<li>Array.from<pre><code class=\"language-js\">console.log( Array.from(&quot;ab&quot;) )    // [&quot;a&quot;, &quot;b&quot;]</code></pre>\n</li>\n</ul>\n<h2 id=\"iterators\">Iterators</h2>\n<p>Iterator is common used, as to decouple algorithms.</p>\n<h3 id=\"iterator-iterablefn-\">Iterator = iterableFn()</h3>\n<p>After iterable&#39;s implementation, it returns an object called iterator, which uses &quot;next&quot; method to iterate.</p>\n<pre><code class=\"language-js\">/** Test in chrome 55  **/\n// Array\nconsole.log( [][Symbol.iterator]() )    // ArrayIterator {}\n\n// String\nconsole.log( &#39;&#39;[Symbol.iterator]() )    //  StringIterator {}\n\n// Map\nconsole.log( new Map([[]])[Symbol.iterator]() )    // MapIterator {[undefined, undefined]}\n\n// Set\nconsole.log( new Set([])[Symbol.iterator]() )    // SetIterator {}\n\n// Dom elements\nconsole.log( document.getElementsByTagName(&#39;body&#39;)[Symbol.iterator]() )    // ArrayIterator {}\n\n// arguments\nfunction test() {\n    console.log( arguments[Symbol.iterator]() )\n}\ntest(1, 2, 3)    // ArrayIterator {}</code></pre>\n<p>Add value and Implement method &quot;next&quot;:</p>\n<pre><code class=\"language-js\">/** Test in chrome 55  **/\n// Array\nconsole.log( [1, 2][Symbol.iterator]().next() )    // {value: 1, done: false}\n\n// String\nconsole.log( &#39;ab&#39;[Symbol.iterator]().next() )    //  {value: &#39;a&#39;, done: false}\n\n// Map\nconsole.log( new Map([[1, &#39;a&#39;]])[Symbol.iterator]().next() )    // {value: [1, &#39;a&#39;], done: false}\n\n// Set\nconsole.log( new Set([1, 1, 2])[Symbol.iterator]().next() )    // {value1: , done: false}\n\n// Dom elements\nconsole.log( document.getElementsByTagName(&#39;body&#39;)[Symbol.iterator]().next() )    // {value: body(dom), done: false}\n\n// arguments\nfunction test() {\n    console.log( arguments[Symbol.iterator]().next() )\n}\ntest(1, 2, 3)    // {value: 1, done: false}</code></pre>\n<h3 id=\"iterator-generator-\">Iterator = generator()</h3>\n<p>Setting iterator mutually again and again seems inefficient, syntactic sugar is needed. Fortunately, ES6 provides the useful &quot;generater&quot;</p>\n<pre><code class=\"language-js\">function* iteratorMaker() {\n    yield 1\n    yield 2\n}\n\nconst iterator =  iteratorMaker()\n\nconsole.log( iterator )    // iteratorMaker {[[GeneratorStatus]]: &quot;suspended&quot;, [[GeneratorReceiver]]: Window, [[GeneratorLocation]]: Object}\n\nconsole.log( iterator.next() )    // {value: 1, done: false}\n\nconsole.log( iterator.next() )    // {value: 2, done: false}\n\nconsole.log( iterator.next() )    // {value: undefined, done: true}</code></pre>\n<h1 id=\"application\">Application</h1>\n<p>Iterator can be applied in wide situations, there&#39;s a sample to generate increasing id numbers.</p>\n<pre><code class=\"language-js\">function* idIteratorMaker() {\n    let id = 0\n    while (true) {\n        yield id++\n    }\n}\n\nfunction create(idIterator) {\n    return idIterator.next().value\n}\n\nconst idIterator = idIteratorMaker()\n\nconst a = create(idIterator)\nconst b = create(idIterator)\nconst c = create(idIterator)\n\nconsole.log(a)     // 0\nconsole.log(b)     // 1\nconsole.log(c)     // 2</code></pre>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>Obviously, iterator makes codes more readable and matainable.  </p>\n<h1 id=\"reference\">Reference</h1>\n<ol>\n<li><a href=\"http://exploringjs.com/es6/ch_iteration.html#sec_iterating-language-constructs\">http://exploringjs.com/es6/ch_iteration.html#sec_iterating-language-constructs</a>  </li>\n<li><a href=\"https://tc39.github.io/ecma262/#table-1\">https://tc39.github.io/ecma262/#table-1</a></li>\n</ol>\n","createTime":"2017/07/01 14:57","categorySequence":["All","Technology","Javascript","ES6"],"introduction":"INTRODUCTION Iterator is one of the most common design modes in daily development. Let's explore the...","uniqueHtmlName":"gist-es6-iterator","blogProps":{"createTime":"2017/07/01 14:57","tags":["javascript","es6"],"comment":"1"}}]}
